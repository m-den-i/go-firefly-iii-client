/*
Firefly III API v2.0.4

This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2023-06-11T09:14:35+00:00 

API version: 2.0.4
Contact: james@firefly-iii.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// TransactionTypeFilter the model 'TransactionTypeFilter'
type TransactionTypeFilter string

// List of TransactionTypeFilter
const (
	ALL TransactionTypeFilter = "all"
	WITHDRAWAL TransactionTypeFilter = "withdrawal"
	WITHDRAWALS TransactionTypeFilter = "withdrawals"
	EXPENSE TransactionTypeFilter = "expense"
	DEPOSIT TransactionTypeFilter = "deposit"
	DEPOSITS TransactionTypeFilter = "deposits"
	INCOME TransactionTypeFilter = "income"
	TRANSFER TransactionTypeFilter = "transfer"
	TRANSFERS TransactionTypeFilter = "transfers"
	OPENING_BALANCE TransactionTypeFilter = "opening_balance"
	RECONCILIATION TransactionTypeFilter = "reconciliation"
	SPECIAL TransactionTypeFilter = "special"
	SPECIALS TransactionTypeFilter = "specials"
	DEFAULT TransactionTypeFilter = "default"
)

// All allowed values of TransactionTypeFilter enum
var AllowedTransactionTypeFilterEnumValues = []TransactionTypeFilter{
	"all",
	"withdrawal",
	"withdrawals",
	"expense",
	"deposit",
	"deposits",
	"income",
	"transfer",
	"transfers",
	"opening_balance",
	"reconciliation",
	"special",
	"specials",
	"default",
}

func (v *TransactionTypeFilter) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TransactionTypeFilter(value)
	for _, existing := range AllowedTransactionTypeFilterEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TransactionTypeFilter", value)
}

// NewTransactionTypeFilterFromValue returns a pointer to a valid TransactionTypeFilter
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTransactionTypeFilterFromValue(v string) (*TransactionTypeFilter, error) {
	ev := TransactionTypeFilter(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TransactionTypeFilter: valid values are %v", v, AllowedTransactionTypeFilterEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TransactionTypeFilter) IsValid() bool {
	for _, existing := range AllowedTransactionTypeFilterEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TransactionTypeFilter value
func (v TransactionTypeFilter) Ptr() *TransactionTypeFilter {
	return &v
}

type NullableTransactionTypeFilter struct {
	value *TransactionTypeFilter
	isSet bool
}

func (v NullableTransactionTypeFilter) Get() *TransactionTypeFilter {
	return v.value
}

func (v *NullableTransactionTypeFilter) Set(val *TransactionTypeFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionTypeFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionTypeFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionTypeFilter(val *TransactionTypeFilter) *NullableTransactionTypeFilter {
	return &NullableTransactionTypeFilter{value: val, isSet: true}
}

func (v NullableTransactionTypeFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionTypeFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

