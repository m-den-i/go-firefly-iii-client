/*
Firefly III API v2.0.4

This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2023-06-11T09:14:35+00:00 

API version: 2.0.4
Contact: james@firefly-iii.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// WebhookResponse Indicator for what Firefly III will deliver to the webhook URL.
type WebhookResponse string

// List of WebhookResponse
const (
	TRANSACTIONS WebhookResponse = "TRANSACTIONS"
	ACCOUNTS WebhookResponse = "ACCOUNTS"
	NONE WebhookResponse = "NONE"
)

// All allowed values of WebhookResponse enum
var AllowedWebhookResponseEnumValues = []WebhookResponse{
	"TRANSACTIONS",
	"ACCOUNTS",
	"NONE",
}

func (v *WebhookResponse) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WebhookResponse(value)
	for _, existing := range AllowedWebhookResponseEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid WebhookResponse", value)
}

// NewWebhookResponseFromValue returns a pointer to a valid WebhookResponse
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWebhookResponseFromValue(v string) (*WebhookResponse, error) {
	ev := WebhookResponse(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for WebhookResponse: valid values are %v", v, AllowedWebhookResponseEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WebhookResponse) IsValid() bool {
	for _, existing := range AllowedWebhookResponseEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to WebhookResponse value
func (v WebhookResponse) Ptr() *WebhookResponse {
	return &v
}

type NullableWebhookResponse struct {
	value *WebhookResponse
	isSet bool
}

func (v NullableWebhookResponse) Get() *WebhookResponse {
	return v.value
}

func (v *NullableWebhookResponse) Set(val *WebhookResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableWebhookResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableWebhookResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebhookResponse(val *WebhookResponse) *NullableWebhookResponse {
	return &NullableWebhookResponse{value: val, isSet: true}
}

func (v NullableWebhookResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebhookResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

