/*
Firefly III API v2.0.4

This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2023-06-11T09:14:35+00:00 

API version: 2.0.4
Contact: james@firefly-iii.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// RecurrenceRepetitionType The type of the repetition. ndom means: the n-th weekday of the month, where you can also specify which day of the week.
type RecurrenceRepetitionType string

// List of RecurrenceRepetitionType
const (
	DAILY RecurrenceRepetitionType = "daily"
	WEEKLY RecurrenceRepetitionType = "weekly"
	NDOM RecurrenceRepetitionType = "ndom"
	MONTHLY RecurrenceRepetitionType = "monthly"
	YEARLY RecurrenceRepetitionType = "yearly"
)

// All allowed values of RecurrenceRepetitionType enum
var AllowedRecurrenceRepetitionTypeEnumValues = []RecurrenceRepetitionType{
	"daily",
	"weekly",
	"ndom",
	"monthly",
	"yearly",
}

func (v *RecurrenceRepetitionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RecurrenceRepetitionType(value)
	for _, existing := range AllowedRecurrenceRepetitionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RecurrenceRepetitionType", value)
}

// NewRecurrenceRepetitionTypeFromValue returns a pointer to a valid RecurrenceRepetitionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRecurrenceRepetitionTypeFromValue(v string) (*RecurrenceRepetitionType, error) {
	ev := RecurrenceRepetitionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RecurrenceRepetitionType: valid values are %v", v, AllowedRecurrenceRepetitionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RecurrenceRepetitionType) IsValid() bool {
	for _, existing := range AllowedRecurrenceRepetitionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RecurrenceRepetitionType value
func (v RecurrenceRepetitionType) Ptr() *RecurrenceRepetitionType {
	return &v
}

type NullableRecurrenceRepetitionType struct {
	value *RecurrenceRepetitionType
	isSet bool
}

func (v NullableRecurrenceRepetitionType) Get() *RecurrenceRepetitionType {
	return v.value
}

func (v *NullableRecurrenceRepetitionType) Set(val *RecurrenceRepetitionType) {
	v.value = val
	v.isSet = true
}

func (v NullableRecurrenceRepetitionType) IsSet() bool {
	return v.isSet
}

func (v *NullableRecurrenceRepetitionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecurrenceRepetitionType(val *RecurrenceRepetitionType) *NullableRecurrenceRepetitionType {
	return &NullableRecurrenceRepetitionType{value: val, isSet: true}
}

func (v NullableRecurrenceRepetitionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecurrenceRepetitionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

