/*
Firefly III API v2.0.4

This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2023-06-11T09:14:35+00:00 

API version: 2.0.4
Contact: james@firefly-iii.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// UserBlockedCodeProperty If you say the user must be blocked, this will be the reason code.
type UserBlockedCodeProperty string

// List of UserBlockedCodeProperty
const (
	EMAIL_CHANGED UserBlockedCodeProperty = "email_changed"
	NULL UserBlockedCodeProperty = "null"
)

// All allowed values of UserBlockedCodeProperty enum
var AllowedUserBlockedCodePropertyEnumValues = []UserBlockedCodeProperty{
	"email_changed",
	"null",
}

func (v *UserBlockedCodeProperty) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := UserBlockedCodeProperty(value)
	for _, existing := range AllowedUserBlockedCodePropertyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid UserBlockedCodeProperty", value)
}

// NewUserBlockedCodePropertyFromValue returns a pointer to a valid UserBlockedCodeProperty
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewUserBlockedCodePropertyFromValue(v string) (*UserBlockedCodeProperty, error) {
	ev := UserBlockedCodeProperty(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for UserBlockedCodeProperty: valid values are %v", v, AllowedUserBlockedCodePropertyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v UserBlockedCodeProperty) IsValid() bool {
	for _, existing := range AllowedUserBlockedCodePropertyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to UserBlockedCodeProperty value
func (v UserBlockedCodeProperty) Ptr() *UserBlockedCodeProperty {
	return &v
}

type NullableUserBlockedCodeProperty struct {
	value *UserBlockedCodeProperty
	isSet bool
}

func (v NullableUserBlockedCodeProperty) Get() *UserBlockedCodeProperty {
	return v.value
}

func (v *NullableUserBlockedCodeProperty) Set(val *UserBlockedCodeProperty) {
	v.value = val
	v.isSet = true
}

func (v NullableUserBlockedCodeProperty) IsSet() bool {
	return v.isSet
}

func (v *NullableUserBlockedCodeProperty) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserBlockedCodeProperty(val *UserBlockedCodeProperty) *NullableUserBlockedCodeProperty {
	return &NullableUserBlockedCodeProperty{value: val, isSet: true}
}

func (v NullableUserBlockedCodeProperty) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserBlockedCodeProperty) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

