/*
Firefly III API v2.0.4

This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2023-06-11T09:14:35+00:00 

API version: 2.0.4
Contact: james@firefly-iii.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ValidationErrorErrors type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ValidationErrorErrors{}

// ValidationErrorErrors struct for ValidationErrorErrors
type ValidationErrorErrors struct {
	Email []string `json:"email,omitempty"`
	Blocked []string `json:"blocked,omitempty"`
	Role []string `json:"role,omitempty"`
	BlockedCode []string `json:"blocked_code,omitempty"`
	Name []string `json:"name,omitempty"`
	Type []string `json:"type,omitempty"`
	Iban []string `json:"iban,omitempty"`
	Start []string `json:"start,omitempty"`
	End []string `json:"end,omitempty"`
	Date []string `json:"date,omitempty"`
}

// NewValidationErrorErrors instantiates a new ValidationErrorErrors object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewValidationErrorErrors() *ValidationErrorErrors {
	this := ValidationErrorErrors{}
	return &this
}

// NewValidationErrorErrorsWithDefaults instantiates a new ValidationErrorErrors object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewValidationErrorErrorsWithDefaults() *ValidationErrorErrors {
	this := ValidationErrorErrors{}
	return &this
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *ValidationErrorErrors) GetEmail() []string {
	if o == nil || IsNil(o.Email) {
		var ret []string
		return ret
	}
	return o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidationErrorErrors) GetEmailOk() ([]string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *ValidationErrorErrors) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given []string and assigns it to the Email field.
func (o *ValidationErrorErrors) SetEmail(v []string) {
	o.Email = v
}

// GetBlocked returns the Blocked field value if set, zero value otherwise.
func (o *ValidationErrorErrors) GetBlocked() []string {
	if o == nil || IsNil(o.Blocked) {
		var ret []string
		return ret
	}
	return o.Blocked
}

// GetBlockedOk returns a tuple with the Blocked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidationErrorErrors) GetBlockedOk() ([]string, bool) {
	if o == nil || IsNil(o.Blocked) {
		return nil, false
	}
	return o.Blocked, true
}

// HasBlocked returns a boolean if a field has been set.
func (o *ValidationErrorErrors) HasBlocked() bool {
	if o != nil && !IsNil(o.Blocked) {
		return true
	}

	return false
}

// SetBlocked gets a reference to the given []string and assigns it to the Blocked field.
func (o *ValidationErrorErrors) SetBlocked(v []string) {
	o.Blocked = v
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *ValidationErrorErrors) GetRole() []string {
	if o == nil || IsNil(o.Role) {
		var ret []string
		return ret
	}
	return o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidationErrorErrors) GetRoleOk() ([]string, bool) {
	if o == nil || IsNil(o.Role) {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *ValidationErrorErrors) HasRole() bool {
	if o != nil && !IsNil(o.Role) {
		return true
	}

	return false
}

// SetRole gets a reference to the given []string and assigns it to the Role field.
func (o *ValidationErrorErrors) SetRole(v []string) {
	o.Role = v
}

// GetBlockedCode returns the BlockedCode field value if set, zero value otherwise.
func (o *ValidationErrorErrors) GetBlockedCode() []string {
	if o == nil || IsNil(o.BlockedCode) {
		var ret []string
		return ret
	}
	return o.BlockedCode
}

// GetBlockedCodeOk returns a tuple with the BlockedCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidationErrorErrors) GetBlockedCodeOk() ([]string, bool) {
	if o == nil || IsNil(o.BlockedCode) {
		return nil, false
	}
	return o.BlockedCode, true
}

// HasBlockedCode returns a boolean if a field has been set.
func (o *ValidationErrorErrors) HasBlockedCode() bool {
	if o != nil && !IsNil(o.BlockedCode) {
		return true
	}

	return false
}

// SetBlockedCode gets a reference to the given []string and assigns it to the BlockedCode field.
func (o *ValidationErrorErrors) SetBlockedCode(v []string) {
	o.BlockedCode = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ValidationErrorErrors) GetName() []string {
	if o == nil || IsNil(o.Name) {
		var ret []string
		return ret
	}
	return o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidationErrorErrors) GetNameOk() ([]string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ValidationErrorErrors) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given []string and assigns it to the Name field.
func (o *ValidationErrorErrors) SetName(v []string) {
	o.Name = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ValidationErrorErrors) GetType() []string {
	if o == nil || IsNil(o.Type) {
		var ret []string
		return ret
	}
	return o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidationErrorErrors) GetTypeOk() ([]string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ValidationErrorErrors) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given []string and assigns it to the Type field.
func (o *ValidationErrorErrors) SetType(v []string) {
	o.Type = v
}

// GetIban returns the Iban field value if set, zero value otherwise.
func (o *ValidationErrorErrors) GetIban() []string {
	if o == nil || IsNil(o.Iban) {
		var ret []string
		return ret
	}
	return o.Iban
}

// GetIbanOk returns a tuple with the Iban field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidationErrorErrors) GetIbanOk() ([]string, bool) {
	if o == nil || IsNil(o.Iban) {
		return nil, false
	}
	return o.Iban, true
}

// HasIban returns a boolean if a field has been set.
func (o *ValidationErrorErrors) HasIban() bool {
	if o != nil && !IsNil(o.Iban) {
		return true
	}

	return false
}

// SetIban gets a reference to the given []string and assigns it to the Iban field.
func (o *ValidationErrorErrors) SetIban(v []string) {
	o.Iban = v
}

// GetStart returns the Start field value if set, zero value otherwise.
func (o *ValidationErrorErrors) GetStart() []string {
	if o == nil || IsNil(o.Start) {
		var ret []string
		return ret
	}
	return o.Start
}

// GetStartOk returns a tuple with the Start field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidationErrorErrors) GetStartOk() ([]string, bool) {
	if o == nil || IsNil(o.Start) {
		return nil, false
	}
	return o.Start, true
}

// HasStart returns a boolean if a field has been set.
func (o *ValidationErrorErrors) HasStart() bool {
	if o != nil && !IsNil(o.Start) {
		return true
	}

	return false
}

// SetStart gets a reference to the given []string and assigns it to the Start field.
func (o *ValidationErrorErrors) SetStart(v []string) {
	o.Start = v
}

// GetEnd returns the End field value if set, zero value otherwise.
func (o *ValidationErrorErrors) GetEnd() []string {
	if o == nil || IsNil(o.End) {
		var ret []string
		return ret
	}
	return o.End
}

// GetEndOk returns a tuple with the End field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidationErrorErrors) GetEndOk() ([]string, bool) {
	if o == nil || IsNil(o.End) {
		return nil, false
	}
	return o.End, true
}

// HasEnd returns a boolean if a field has been set.
func (o *ValidationErrorErrors) HasEnd() bool {
	if o != nil && !IsNil(o.End) {
		return true
	}

	return false
}

// SetEnd gets a reference to the given []string and assigns it to the End field.
func (o *ValidationErrorErrors) SetEnd(v []string) {
	o.End = v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *ValidationErrorErrors) GetDate() []string {
	if o == nil || IsNil(o.Date) {
		var ret []string
		return ret
	}
	return o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidationErrorErrors) GetDateOk() ([]string, bool) {
	if o == nil || IsNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *ValidationErrorErrors) HasDate() bool {
	if o != nil && !IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given []string and assigns it to the Date field.
func (o *ValidationErrorErrors) SetDate(v []string) {
	o.Date = v
}

func (o ValidationErrorErrors) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ValidationErrorErrors) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.Blocked) {
		toSerialize["blocked"] = o.Blocked
	}
	if !IsNil(o.Role) {
		toSerialize["role"] = o.Role
	}
	if !IsNil(o.BlockedCode) {
		toSerialize["blocked_code"] = o.BlockedCode
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Iban) {
		toSerialize["iban"] = o.Iban
	}
	if !IsNil(o.Start) {
		toSerialize["start"] = o.Start
	}
	if !IsNil(o.End) {
		toSerialize["end"] = o.End
	}
	if !IsNil(o.Date) {
		toSerialize["date"] = o.Date
	}
	return toSerialize, nil
}

type NullableValidationErrorErrors struct {
	value *ValidationErrorErrors
	isSet bool
}

func (v NullableValidationErrorErrors) Get() *ValidationErrorErrors {
	return v.value
}

func (v *NullableValidationErrorErrors) Set(val *ValidationErrorErrors) {
	v.value = val
	v.isSet = true
}

func (v NullableValidationErrorErrors) IsSet() bool {
	return v.isSet
}

func (v *NullableValidationErrorErrors) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValidationErrorErrors(val *ValidationErrorErrors) *NullableValidationErrorErrors {
	return &NullableValidationErrorErrors{value: val, isSet: true}
}

func (v NullableValidationErrorErrors) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValidationErrorErrors) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


