/*
Firefly III API v2.0.4

This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2023-06-11T09:14:35+00:00 

API version: 2.0.4
Contact: james@firefly-iii.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RuleArray type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RuleArray{}

// RuleArray struct for RuleArray
type RuleArray struct {
	Data []RuleRead `json:"data"`
	Meta Meta `json:"meta"`
	Links PageLink `json:"links"`
}

// NewRuleArray instantiates a new RuleArray object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRuleArray(data []RuleRead, meta Meta, links PageLink) *RuleArray {
	this := RuleArray{}
	this.Data = data
	this.Meta = meta
	this.Links = links
	return &this
}

// NewRuleArrayWithDefaults instantiates a new RuleArray object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRuleArrayWithDefaults() *RuleArray {
	this := RuleArray{}
	return &this
}

// GetData returns the Data field value
func (o *RuleArray) GetData() []RuleRead {
	if o == nil {
		var ret []RuleRead
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *RuleArray) GetDataOk() ([]RuleRead, bool) {
	if o == nil {
		return nil, false
	}
	return o.Data, true
}

// SetData sets field value
func (o *RuleArray) SetData(v []RuleRead) {
	o.Data = v
}

// GetMeta returns the Meta field value
func (o *RuleArray) GetMeta() Meta {
	if o == nil {
		var ret Meta
		return ret
	}

	return o.Meta
}

// GetMetaOk returns a tuple with the Meta field value
// and a boolean to check if the value has been set.
func (o *RuleArray) GetMetaOk() (*Meta, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Meta, true
}

// SetMeta sets field value
func (o *RuleArray) SetMeta(v Meta) {
	o.Meta = v
}

// GetLinks returns the Links field value
func (o *RuleArray) GetLinks() PageLink {
	if o == nil {
		var ret PageLink
		return ret
	}

	return o.Links
}

// GetLinksOk returns a tuple with the Links field value
// and a boolean to check if the value has been set.
func (o *RuleArray) GetLinksOk() (*PageLink, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Links, true
}

// SetLinks sets field value
func (o *RuleArray) SetLinks(v PageLink) {
	o.Links = v
}

func (o RuleArray) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RuleArray) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["data"] = o.Data
	toSerialize["meta"] = o.Meta
	toSerialize["links"] = o.Links
	return toSerialize, nil
}

type NullableRuleArray struct {
	value *RuleArray
	isSet bool
}

func (v NullableRuleArray) Get() *RuleArray {
	return v.value
}

func (v *NullableRuleArray) Set(val *RuleArray) {
	v.value = val
	v.isSet = true
}

func (v NullableRuleArray) IsSet() bool {
	return v.isSet
}

func (v *NullableRuleArray) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRuleArray(val *RuleArray) *NullableRuleArray {
	return &NullableRuleArray{value: val, isSet: true}
}

func (v NullableRuleArray) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRuleArray) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


