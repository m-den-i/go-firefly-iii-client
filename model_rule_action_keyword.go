/*
Firefly III API v2.0.4

This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2023-06-11T09:14:35+00:00 

API version: 2.0.4
Contact: james@firefly-iii.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// RuleActionKeyword The type of thing this action will do. A limited set is possible.
type RuleActionKeyword string

// List of RuleActionKeyword
const (
	USER_ACTION RuleActionKeyword = "user_action"
	SET_CATEGORY RuleActionKeyword = "set_category"
	CLEAR_CATEGORY RuleActionKeyword = "clear_category"
	SET_BUDGET RuleActionKeyword = "set_budget"
	CLEAR_BUDGET RuleActionKeyword = "clear_budget"
	ADD_TAG RuleActionKeyword = "add_tag"
	REMOVE_TAG RuleActionKeyword = "remove_tag"
	REMOVE_ALL_TAGS RuleActionKeyword = "remove_all_tags"
	SET_DESCRIPTION RuleActionKeyword = "set_description"
	APPEND_DESCRIPTION RuleActionKeyword = "append_description"
	PREPEND_DESCRIPTION RuleActionKeyword = "prepend_description"
	SET_SOURCE_ACCOUNT RuleActionKeyword = "set_source_account"
	SET_DESTINATION_ACCOUNT RuleActionKeyword = "set_destination_account"
	SET_NOTES RuleActionKeyword = "set_notes"
	APPEND_NOTES RuleActionKeyword = "append_notes"
	PREPEND_NOTES RuleActionKeyword = "prepend_notes"
	CLEAR_NOTES RuleActionKeyword = "clear_notes"
	LINK_TO_BILL RuleActionKeyword = "link_to_bill"
	CONVERT_WITHDRAWAL RuleActionKeyword = "convert_withdrawal"
	CONVERT_DEPOSIT RuleActionKeyword = "convert_deposit"
	CONVERT_TRANSFER RuleActionKeyword = "convert_transfer"
	DELETE_TRANSACTION RuleActionKeyword = "delete_transaction"
)

// All allowed values of RuleActionKeyword enum
var AllowedRuleActionKeywordEnumValues = []RuleActionKeyword{
	"user_action",
	"set_category",
	"clear_category",
	"set_budget",
	"clear_budget",
	"add_tag",
	"remove_tag",
	"remove_all_tags",
	"set_description",
	"append_description",
	"prepend_description",
	"set_source_account",
	"set_destination_account",
	"set_notes",
	"append_notes",
	"prepend_notes",
	"clear_notes",
	"link_to_bill",
	"convert_withdrawal",
	"convert_deposit",
	"convert_transfer",
	"delete_transaction",
}

func (v *RuleActionKeyword) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RuleActionKeyword(value)
	for _, existing := range AllowedRuleActionKeywordEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RuleActionKeyword", value)
}

// NewRuleActionKeywordFromValue returns a pointer to a valid RuleActionKeyword
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRuleActionKeywordFromValue(v string) (*RuleActionKeyword, error) {
	ev := RuleActionKeyword(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RuleActionKeyword: valid values are %v", v, AllowedRuleActionKeywordEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RuleActionKeyword) IsValid() bool {
	for _, existing := range AllowedRuleActionKeywordEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RuleActionKeyword value
func (v RuleActionKeyword) Ptr() *RuleActionKeyword {
	return &v
}

type NullableRuleActionKeyword struct {
	value *RuleActionKeyword
	isSet bool
}

func (v NullableRuleActionKeyword) Get() *RuleActionKeyword {
	return v.value
}

func (v *NullableRuleActionKeyword) Set(val *RuleActionKeyword) {
	v.value = val
	v.isSet = true
}

func (v NullableRuleActionKeyword) IsSet() bool {
	return v.isSet
}

func (v *NullableRuleActionKeyword) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRuleActionKeyword(val *RuleActionKeyword) *NullableRuleActionKeyword {
	return &NullableRuleActionKeyword{value: val, isSet: true}
}

func (v NullableRuleActionKeyword) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRuleActionKeyword) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

