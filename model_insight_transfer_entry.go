/*
Firefly III API v2.0.4

This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2023-06-11T09:14:35+00:00 

API version: 2.0.4
Contact: james@firefly-iii.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the InsightTransferEntry type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InsightTransferEntry{}

// InsightTransferEntry struct for InsightTransferEntry
type InsightTransferEntry struct {
	// This ID is a reference to the original object.
	Id *string `json:"id,omitempty"`
	// This is the name of the object.
	Name *string `json:"name,omitempty"`
	// The total amount transferred between start date and end date, a number defined as a string, for this asset account.
	Difference *string `json:"difference,omitempty"`
	// The total amount transferred between start date and end date, a number as a float, for this asset account. May have rounding errors.
	DifferenceFloat *float64 `json:"difference_float,omitempty"`
	// The total amount transferred TO this account between start date and end date, a number defined as a string, for this asset account.
	In *string `json:"in,omitempty"`
	// The total amount transferred FROM this account between start date and end date, a number as a float, for this asset account. May have rounding errors.
	InFloat *float64 `json:"in_float,omitempty"`
	// The total amount transferred FROM this account between start date and end date, a number defined as a string, for this asset account.
	Out *string `json:"out,omitempty"`
	// The total amount transferred TO this account between start date and end date, a number as a float, for this asset account. May have rounding errors.
	OutFloat *float64 `json:"out_float,omitempty"`
	// The currency ID of the expenses listed for this account.
	CurrencyId *string `json:"currency_id,omitempty"`
	// The currency code of the expenses listed for this account.
	CurrencyCode *string `json:"currency_code,omitempty"`
}

// NewInsightTransferEntry instantiates a new InsightTransferEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInsightTransferEntry() *InsightTransferEntry {
	this := InsightTransferEntry{}
	return &this
}

// NewInsightTransferEntryWithDefaults instantiates a new InsightTransferEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInsightTransferEntryWithDefaults() *InsightTransferEntry {
	this := InsightTransferEntry{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *InsightTransferEntry) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InsightTransferEntry) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *InsightTransferEntry) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *InsightTransferEntry) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *InsightTransferEntry) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InsightTransferEntry) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *InsightTransferEntry) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *InsightTransferEntry) SetName(v string) {
	o.Name = &v
}

// GetDifference returns the Difference field value if set, zero value otherwise.
func (o *InsightTransferEntry) GetDifference() string {
	if o == nil || IsNil(o.Difference) {
		var ret string
		return ret
	}
	return *o.Difference
}

// GetDifferenceOk returns a tuple with the Difference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InsightTransferEntry) GetDifferenceOk() (*string, bool) {
	if o == nil || IsNil(o.Difference) {
		return nil, false
	}
	return o.Difference, true
}

// HasDifference returns a boolean if a field has been set.
func (o *InsightTransferEntry) HasDifference() bool {
	if o != nil && !IsNil(o.Difference) {
		return true
	}

	return false
}

// SetDifference gets a reference to the given string and assigns it to the Difference field.
func (o *InsightTransferEntry) SetDifference(v string) {
	o.Difference = &v
}

// GetDifferenceFloat returns the DifferenceFloat field value if set, zero value otherwise.
func (o *InsightTransferEntry) GetDifferenceFloat() float64 {
	if o == nil || IsNil(o.DifferenceFloat) {
		var ret float64
		return ret
	}
	return *o.DifferenceFloat
}

// GetDifferenceFloatOk returns a tuple with the DifferenceFloat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InsightTransferEntry) GetDifferenceFloatOk() (*float64, bool) {
	if o == nil || IsNil(o.DifferenceFloat) {
		return nil, false
	}
	return o.DifferenceFloat, true
}

// HasDifferenceFloat returns a boolean if a field has been set.
func (o *InsightTransferEntry) HasDifferenceFloat() bool {
	if o != nil && !IsNil(o.DifferenceFloat) {
		return true
	}

	return false
}

// SetDifferenceFloat gets a reference to the given float64 and assigns it to the DifferenceFloat field.
func (o *InsightTransferEntry) SetDifferenceFloat(v float64) {
	o.DifferenceFloat = &v
}

// GetIn returns the In field value if set, zero value otherwise.
func (o *InsightTransferEntry) GetIn() string {
	if o == nil || IsNil(o.In) {
		var ret string
		return ret
	}
	return *o.In
}

// GetInOk returns a tuple with the In field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InsightTransferEntry) GetInOk() (*string, bool) {
	if o == nil || IsNil(o.In) {
		return nil, false
	}
	return o.In, true
}

// HasIn returns a boolean if a field has been set.
func (o *InsightTransferEntry) HasIn() bool {
	if o != nil && !IsNil(o.In) {
		return true
	}

	return false
}

// SetIn gets a reference to the given string and assigns it to the In field.
func (o *InsightTransferEntry) SetIn(v string) {
	o.In = &v
}

// GetInFloat returns the InFloat field value if set, zero value otherwise.
func (o *InsightTransferEntry) GetInFloat() float64 {
	if o == nil || IsNil(o.InFloat) {
		var ret float64
		return ret
	}
	return *o.InFloat
}

// GetInFloatOk returns a tuple with the InFloat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InsightTransferEntry) GetInFloatOk() (*float64, bool) {
	if o == nil || IsNil(o.InFloat) {
		return nil, false
	}
	return o.InFloat, true
}

// HasInFloat returns a boolean if a field has been set.
func (o *InsightTransferEntry) HasInFloat() bool {
	if o != nil && !IsNil(o.InFloat) {
		return true
	}

	return false
}

// SetInFloat gets a reference to the given float64 and assigns it to the InFloat field.
func (o *InsightTransferEntry) SetInFloat(v float64) {
	o.InFloat = &v
}

// GetOut returns the Out field value if set, zero value otherwise.
func (o *InsightTransferEntry) GetOut() string {
	if o == nil || IsNil(o.Out) {
		var ret string
		return ret
	}
	return *o.Out
}

// GetOutOk returns a tuple with the Out field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InsightTransferEntry) GetOutOk() (*string, bool) {
	if o == nil || IsNil(o.Out) {
		return nil, false
	}
	return o.Out, true
}

// HasOut returns a boolean if a field has been set.
func (o *InsightTransferEntry) HasOut() bool {
	if o != nil && !IsNil(o.Out) {
		return true
	}

	return false
}

// SetOut gets a reference to the given string and assigns it to the Out field.
func (o *InsightTransferEntry) SetOut(v string) {
	o.Out = &v
}

// GetOutFloat returns the OutFloat field value if set, zero value otherwise.
func (o *InsightTransferEntry) GetOutFloat() float64 {
	if o == nil || IsNil(o.OutFloat) {
		var ret float64
		return ret
	}
	return *o.OutFloat
}

// GetOutFloatOk returns a tuple with the OutFloat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InsightTransferEntry) GetOutFloatOk() (*float64, bool) {
	if o == nil || IsNil(o.OutFloat) {
		return nil, false
	}
	return o.OutFloat, true
}

// HasOutFloat returns a boolean if a field has been set.
func (o *InsightTransferEntry) HasOutFloat() bool {
	if o != nil && !IsNil(o.OutFloat) {
		return true
	}

	return false
}

// SetOutFloat gets a reference to the given float64 and assigns it to the OutFloat field.
func (o *InsightTransferEntry) SetOutFloat(v float64) {
	o.OutFloat = &v
}

// GetCurrencyId returns the CurrencyId field value if set, zero value otherwise.
func (o *InsightTransferEntry) GetCurrencyId() string {
	if o == nil || IsNil(o.CurrencyId) {
		var ret string
		return ret
	}
	return *o.CurrencyId
}

// GetCurrencyIdOk returns a tuple with the CurrencyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InsightTransferEntry) GetCurrencyIdOk() (*string, bool) {
	if o == nil || IsNil(o.CurrencyId) {
		return nil, false
	}
	return o.CurrencyId, true
}

// HasCurrencyId returns a boolean if a field has been set.
func (o *InsightTransferEntry) HasCurrencyId() bool {
	if o != nil && !IsNil(o.CurrencyId) {
		return true
	}

	return false
}

// SetCurrencyId gets a reference to the given string and assigns it to the CurrencyId field.
func (o *InsightTransferEntry) SetCurrencyId(v string) {
	o.CurrencyId = &v
}

// GetCurrencyCode returns the CurrencyCode field value if set, zero value otherwise.
func (o *InsightTransferEntry) GetCurrencyCode() string {
	if o == nil || IsNil(o.CurrencyCode) {
		var ret string
		return ret
	}
	return *o.CurrencyCode
}

// GetCurrencyCodeOk returns a tuple with the CurrencyCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InsightTransferEntry) GetCurrencyCodeOk() (*string, bool) {
	if o == nil || IsNil(o.CurrencyCode) {
		return nil, false
	}
	return o.CurrencyCode, true
}

// HasCurrencyCode returns a boolean if a field has been set.
func (o *InsightTransferEntry) HasCurrencyCode() bool {
	if o != nil && !IsNil(o.CurrencyCode) {
		return true
	}

	return false
}

// SetCurrencyCode gets a reference to the given string and assigns it to the CurrencyCode field.
func (o *InsightTransferEntry) SetCurrencyCode(v string) {
	o.CurrencyCode = &v
}

func (o InsightTransferEntry) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InsightTransferEntry) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Difference) {
		toSerialize["difference"] = o.Difference
	}
	if !IsNil(o.DifferenceFloat) {
		toSerialize["difference_float"] = o.DifferenceFloat
	}
	if !IsNil(o.In) {
		toSerialize["in"] = o.In
	}
	if !IsNil(o.InFloat) {
		toSerialize["in_float"] = o.InFloat
	}
	if !IsNil(o.Out) {
		toSerialize["out"] = o.Out
	}
	if !IsNil(o.OutFloat) {
		toSerialize["out_float"] = o.OutFloat
	}
	if !IsNil(o.CurrencyId) {
		toSerialize["currency_id"] = o.CurrencyId
	}
	if !IsNil(o.CurrencyCode) {
		toSerialize["currency_code"] = o.CurrencyCode
	}
	return toSerialize, nil
}

type NullableInsightTransferEntry struct {
	value *InsightTransferEntry
	isSet bool
}

func (v NullableInsightTransferEntry) Get() *InsightTransferEntry {
	return v.value
}

func (v *NullableInsightTransferEntry) Set(val *InsightTransferEntry) {
	v.value = val
	v.isSet = true
}

func (v NullableInsightTransferEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableInsightTransferEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInsightTransferEntry(val *InsightTransferEntry) *NullableInsightTransferEntry {
	return &NullableInsightTransferEntry{value: val, isSet: true}
}

func (v NullableInsightTransferEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInsightTransferEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


