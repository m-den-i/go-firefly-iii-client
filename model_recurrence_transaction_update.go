/*
Firefly III API v2.0.4

This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2023-06-11T09:14:35+00:00 

API version: 2.0.4
Contact: james@firefly-iii.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RecurrenceTransactionUpdate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecurrenceTransactionUpdate{}

// RecurrenceTransactionUpdate struct for RecurrenceTransactionUpdate
type RecurrenceTransactionUpdate struct {
	Id *string `json:"id,omitempty"`
	Description *string `json:"description,omitempty"`
	// Amount of the transaction.
	Amount *string `json:"amount,omitempty"`
	// Foreign amount of the transaction.
	ForeignAmount NullableString `json:"foreign_amount,omitempty"`
	// Submit either a currency_id or a currency_code.
	CurrencyId *string `json:"currency_id,omitempty"`
	// Submit either a currency_id or a currency_code.
	CurrencyCode *string `json:"currency_code,omitempty"`
	// Submit either a foreign_currency_id or a foreign_currency_code, or neither.
	ForeignCurrencyId NullableString `json:"foreign_currency_id,omitempty"`
	// The budget ID for this transaction.
	BudgetId *string `json:"budget_id,omitempty"`
	// Category ID for this transaction.
	CategoryId *string `json:"category_id,omitempty"`
	// ID of the source account. Submit either this or source_name.
	SourceId *string `json:"source_id,omitempty"`
	// ID of the destination account. Submit either this or destination_name.
	DestinationId *string `json:"destination_id,omitempty"`
	// Array of tags.
	Tags []string `json:"tags,omitempty"`
	PiggyBankId NullableString `json:"piggy_bank_id,omitempty"`
	// Optional.
	BillId NullableString `json:"bill_id,omitempty"`
}

// NewRecurrenceTransactionUpdate instantiates a new RecurrenceTransactionUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecurrenceTransactionUpdate() *RecurrenceTransactionUpdate {
	this := RecurrenceTransactionUpdate{}
	return &this
}

// NewRecurrenceTransactionUpdateWithDefaults instantiates a new RecurrenceTransactionUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecurrenceTransactionUpdateWithDefaults() *RecurrenceTransactionUpdate {
	this := RecurrenceTransactionUpdate{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RecurrenceTransactionUpdate) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecurrenceTransactionUpdate) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RecurrenceTransactionUpdate) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *RecurrenceTransactionUpdate) SetId(v string) {
	o.Id = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *RecurrenceTransactionUpdate) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecurrenceTransactionUpdate) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *RecurrenceTransactionUpdate) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *RecurrenceTransactionUpdate) SetDescription(v string) {
	o.Description = &v
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *RecurrenceTransactionUpdate) GetAmount() string {
	if o == nil || IsNil(o.Amount) {
		var ret string
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecurrenceTransactionUpdate) GetAmountOk() (*string, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *RecurrenceTransactionUpdate) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given string and assigns it to the Amount field.
func (o *RecurrenceTransactionUpdate) SetAmount(v string) {
	o.Amount = &v
}

// GetForeignAmount returns the ForeignAmount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecurrenceTransactionUpdate) GetForeignAmount() string {
	if o == nil || IsNil(o.ForeignAmount.Get()) {
		var ret string
		return ret
	}
	return *o.ForeignAmount.Get()
}

// GetForeignAmountOk returns a tuple with the ForeignAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecurrenceTransactionUpdate) GetForeignAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ForeignAmount.Get(), o.ForeignAmount.IsSet()
}

// HasForeignAmount returns a boolean if a field has been set.
func (o *RecurrenceTransactionUpdate) HasForeignAmount() bool {
	if o != nil && o.ForeignAmount.IsSet() {
		return true
	}

	return false
}

// SetForeignAmount gets a reference to the given NullableString and assigns it to the ForeignAmount field.
func (o *RecurrenceTransactionUpdate) SetForeignAmount(v string) {
	o.ForeignAmount.Set(&v)
}
// SetForeignAmountNil sets the value for ForeignAmount to be an explicit nil
func (o *RecurrenceTransactionUpdate) SetForeignAmountNil() {
	o.ForeignAmount.Set(nil)
}

// UnsetForeignAmount ensures that no value is present for ForeignAmount, not even an explicit nil
func (o *RecurrenceTransactionUpdate) UnsetForeignAmount() {
	o.ForeignAmount.Unset()
}

// GetCurrencyId returns the CurrencyId field value if set, zero value otherwise.
func (o *RecurrenceTransactionUpdate) GetCurrencyId() string {
	if o == nil || IsNil(o.CurrencyId) {
		var ret string
		return ret
	}
	return *o.CurrencyId
}

// GetCurrencyIdOk returns a tuple with the CurrencyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecurrenceTransactionUpdate) GetCurrencyIdOk() (*string, bool) {
	if o == nil || IsNil(o.CurrencyId) {
		return nil, false
	}
	return o.CurrencyId, true
}

// HasCurrencyId returns a boolean if a field has been set.
func (o *RecurrenceTransactionUpdate) HasCurrencyId() bool {
	if o != nil && !IsNil(o.CurrencyId) {
		return true
	}

	return false
}

// SetCurrencyId gets a reference to the given string and assigns it to the CurrencyId field.
func (o *RecurrenceTransactionUpdate) SetCurrencyId(v string) {
	o.CurrencyId = &v
}

// GetCurrencyCode returns the CurrencyCode field value if set, zero value otherwise.
func (o *RecurrenceTransactionUpdate) GetCurrencyCode() string {
	if o == nil || IsNil(o.CurrencyCode) {
		var ret string
		return ret
	}
	return *o.CurrencyCode
}

// GetCurrencyCodeOk returns a tuple with the CurrencyCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecurrenceTransactionUpdate) GetCurrencyCodeOk() (*string, bool) {
	if o == nil || IsNil(o.CurrencyCode) {
		return nil, false
	}
	return o.CurrencyCode, true
}

// HasCurrencyCode returns a boolean if a field has been set.
func (o *RecurrenceTransactionUpdate) HasCurrencyCode() bool {
	if o != nil && !IsNil(o.CurrencyCode) {
		return true
	}

	return false
}

// SetCurrencyCode gets a reference to the given string and assigns it to the CurrencyCode field.
func (o *RecurrenceTransactionUpdate) SetCurrencyCode(v string) {
	o.CurrencyCode = &v
}

// GetForeignCurrencyId returns the ForeignCurrencyId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecurrenceTransactionUpdate) GetForeignCurrencyId() string {
	if o == nil || IsNil(o.ForeignCurrencyId.Get()) {
		var ret string
		return ret
	}
	return *o.ForeignCurrencyId.Get()
}

// GetForeignCurrencyIdOk returns a tuple with the ForeignCurrencyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecurrenceTransactionUpdate) GetForeignCurrencyIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ForeignCurrencyId.Get(), o.ForeignCurrencyId.IsSet()
}

// HasForeignCurrencyId returns a boolean if a field has been set.
func (o *RecurrenceTransactionUpdate) HasForeignCurrencyId() bool {
	if o != nil && o.ForeignCurrencyId.IsSet() {
		return true
	}

	return false
}

// SetForeignCurrencyId gets a reference to the given NullableString and assigns it to the ForeignCurrencyId field.
func (o *RecurrenceTransactionUpdate) SetForeignCurrencyId(v string) {
	o.ForeignCurrencyId.Set(&v)
}
// SetForeignCurrencyIdNil sets the value for ForeignCurrencyId to be an explicit nil
func (o *RecurrenceTransactionUpdate) SetForeignCurrencyIdNil() {
	o.ForeignCurrencyId.Set(nil)
}

// UnsetForeignCurrencyId ensures that no value is present for ForeignCurrencyId, not even an explicit nil
func (o *RecurrenceTransactionUpdate) UnsetForeignCurrencyId() {
	o.ForeignCurrencyId.Unset()
}

// GetBudgetId returns the BudgetId field value if set, zero value otherwise.
func (o *RecurrenceTransactionUpdate) GetBudgetId() string {
	if o == nil || IsNil(o.BudgetId) {
		var ret string
		return ret
	}
	return *o.BudgetId
}

// GetBudgetIdOk returns a tuple with the BudgetId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecurrenceTransactionUpdate) GetBudgetIdOk() (*string, bool) {
	if o == nil || IsNil(o.BudgetId) {
		return nil, false
	}
	return o.BudgetId, true
}

// HasBudgetId returns a boolean if a field has been set.
func (o *RecurrenceTransactionUpdate) HasBudgetId() bool {
	if o != nil && !IsNil(o.BudgetId) {
		return true
	}

	return false
}

// SetBudgetId gets a reference to the given string and assigns it to the BudgetId field.
func (o *RecurrenceTransactionUpdate) SetBudgetId(v string) {
	o.BudgetId = &v
}

// GetCategoryId returns the CategoryId field value if set, zero value otherwise.
func (o *RecurrenceTransactionUpdate) GetCategoryId() string {
	if o == nil || IsNil(o.CategoryId) {
		var ret string
		return ret
	}
	return *o.CategoryId
}

// GetCategoryIdOk returns a tuple with the CategoryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecurrenceTransactionUpdate) GetCategoryIdOk() (*string, bool) {
	if o == nil || IsNil(o.CategoryId) {
		return nil, false
	}
	return o.CategoryId, true
}

// HasCategoryId returns a boolean if a field has been set.
func (o *RecurrenceTransactionUpdate) HasCategoryId() bool {
	if o != nil && !IsNil(o.CategoryId) {
		return true
	}

	return false
}

// SetCategoryId gets a reference to the given string and assigns it to the CategoryId field.
func (o *RecurrenceTransactionUpdate) SetCategoryId(v string) {
	o.CategoryId = &v
}

// GetSourceId returns the SourceId field value if set, zero value otherwise.
func (o *RecurrenceTransactionUpdate) GetSourceId() string {
	if o == nil || IsNil(o.SourceId) {
		var ret string
		return ret
	}
	return *o.SourceId
}

// GetSourceIdOk returns a tuple with the SourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecurrenceTransactionUpdate) GetSourceIdOk() (*string, bool) {
	if o == nil || IsNil(o.SourceId) {
		return nil, false
	}
	return o.SourceId, true
}

// HasSourceId returns a boolean if a field has been set.
func (o *RecurrenceTransactionUpdate) HasSourceId() bool {
	if o != nil && !IsNil(o.SourceId) {
		return true
	}

	return false
}

// SetSourceId gets a reference to the given string and assigns it to the SourceId field.
func (o *RecurrenceTransactionUpdate) SetSourceId(v string) {
	o.SourceId = &v
}

// GetDestinationId returns the DestinationId field value if set, zero value otherwise.
func (o *RecurrenceTransactionUpdate) GetDestinationId() string {
	if o == nil || IsNil(o.DestinationId) {
		var ret string
		return ret
	}
	return *o.DestinationId
}

// GetDestinationIdOk returns a tuple with the DestinationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecurrenceTransactionUpdate) GetDestinationIdOk() (*string, bool) {
	if o == nil || IsNil(o.DestinationId) {
		return nil, false
	}
	return o.DestinationId, true
}

// HasDestinationId returns a boolean if a field has been set.
func (o *RecurrenceTransactionUpdate) HasDestinationId() bool {
	if o != nil && !IsNil(o.DestinationId) {
		return true
	}

	return false
}

// SetDestinationId gets a reference to the given string and assigns it to the DestinationId field.
func (o *RecurrenceTransactionUpdate) SetDestinationId(v string) {
	o.DestinationId = &v
}

// GetTags returns the Tags field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecurrenceTransactionUpdate) GetTags() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecurrenceTransactionUpdate) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *RecurrenceTransactionUpdate) HasTags() bool {
	if o != nil && IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *RecurrenceTransactionUpdate) SetTags(v []string) {
	o.Tags = v
}

// GetPiggyBankId returns the PiggyBankId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecurrenceTransactionUpdate) GetPiggyBankId() string {
	if o == nil || IsNil(o.PiggyBankId.Get()) {
		var ret string
		return ret
	}
	return *o.PiggyBankId.Get()
}

// GetPiggyBankIdOk returns a tuple with the PiggyBankId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecurrenceTransactionUpdate) GetPiggyBankIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PiggyBankId.Get(), o.PiggyBankId.IsSet()
}

// HasPiggyBankId returns a boolean if a field has been set.
func (o *RecurrenceTransactionUpdate) HasPiggyBankId() bool {
	if o != nil && o.PiggyBankId.IsSet() {
		return true
	}

	return false
}

// SetPiggyBankId gets a reference to the given NullableString and assigns it to the PiggyBankId field.
func (o *RecurrenceTransactionUpdate) SetPiggyBankId(v string) {
	o.PiggyBankId.Set(&v)
}
// SetPiggyBankIdNil sets the value for PiggyBankId to be an explicit nil
func (o *RecurrenceTransactionUpdate) SetPiggyBankIdNil() {
	o.PiggyBankId.Set(nil)
}

// UnsetPiggyBankId ensures that no value is present for PiggyBankId, not even an explicit nil
func (o *RecurrenceTransactionUpdate) UnsetPiggyBankId() {
	o.PiggyBankId.Unset()
}

// GetBillId returns the BillId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecurrenceTransactionUpdate) GetBillId() string {
	if o == nil || IsNil(o.BillId.Get()) {
		var ret string
		return ret
	}
	return *o.BillId.Get()
}

// GetBillIdOk returns a tuple with the BillId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecurrenceTransactionUpdate) GetBillIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BillId.Get(), o.BillId.IsSet()
}

// HasBillId returns a boolean if a field has been set.
func (o *RecurrenceTransactionUpdate) HasBillId() bool {
	if o != nil && o.BillId.IsSet() {
		return true
	}

	return false
}

// SetBillId gets a reference to the given NullableString and assigns it to the BillId field.
func (o *RecurrenceTransactionUpdate) SetBillId(v string) {
	o.BillId.Set(&v)
}
// SetBillIdNil sets the value for BillId to be an explicit nil
func (o *RecurrenceTransactionUpdate) SetBillIdNil() {
	o.BillId.Set(nil)
}

// UnsetBillId ensures that no value is present for BillId, not even an explicit nil
func (o *RecurrenceTransactionUpdate) UnsetBillId() {
	o.BillId.Unset()
}

func (o RecurrenceTransactionUpdate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecurrenceTransactionUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	if o.ForeignAmount.IsSet() {
		toSerialize["foreign_amount"] = o.ForeignAmount.Get()
	}
	if !IsNil(o.CurrencyId) {
		toSerialize["currency_id"] = o.CurrencyId
	}
	if !IsNil(o.CurrencyCode) {
		toSerialize["currency_code"] = o.CurrencyCode
	}
	if o.ForeignCurrencyId.IsSet() {
		toSerialize["foreign_currency_id"] = o.ForeignCurrencyId.Get()
	}
	if !IsNil(o.BudgetId) {
		toSerialize["budget_id"] = o.BudgetId
	}
	if !IsNil(o.CategoryId) {
		toSerialize["category_id"] = o.CategoryId
	}
	if !IsNil(o.SourceId) {
		toSerialize["source_id"] = o.SourceId
	}
	if !IsNil(o.DestinationId) {
		toSerialize["destination_id"] = o.DestinationId
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if o.PiggyBankId.IsSet() {
		toSerialize["piggy_bank_id"] = o.PiggyBankId.Get()
	}
	if o.BillId.IsSet() {
		toSerialize["bill_id"] = o.BillId.Get()
	}
	return toSerialize, nil
}

type NullableRecurrenceTransactionUpdate struct {
	value *RecurrenceTransactionUpdate
	isSet bool
}

func (v NullableRecurrenceTransactionUpdate) Get() *RecurrenceTransactionUpdate {
	return v.value
}

func (v *NullableRecurrenceTransactionUpdate) Set(val *RecurrenceTransactionUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableRecurrenceTransactionUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableRecurrenceTransactionUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecurrenceTransactionUpdate(val *RecurrenceTransactionUpdate) *NullableRecurrenceTransactionUpdate {
	return &NullableRecurrenceTransactionUpdate{value: val, isSet: true}
}

func (v NullableRecurrenceTransactionUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecurrenceTransactionUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


