/*
Firefly III API v2.0.4

This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2023-06-11T09:14:35+00:00 

API version: 2.0.4
Contact: james@firefly-iii.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// BillRepeatFrequency How often the bill must be paid.
type BillRepeatFrequency string

// List of BillRepeatFrequency
const (
	WEEKLY BillRepeatFrequency = "weekly"
	MONTHLY BillRepeatFrequency = "monthly"
	QUARTERLY BillRepeatFrequency = "quarterly"
	HALF_YEAR BillRepeatFrequency = "half-year"
	YEARLY BillRepeatFrequency = "yearly"
)

// All allowed values of BillRepeatFrequency enum
var AllowedBillRepeatFrequencyEnumValues = []BillRepeatFrequency{
	"weekly",
	"monthly",
	"quarterly",
	"half-year",
	"yearly",
}

func (v *BillRepeatFrequency) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BillRepeatFrequency(value)
	for _, existing := range AllowedBillRepeatFrequencyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BillRepeatFrequency", value)
}

// NewBillRepeatFrequencyFromValue returns a pointer to a valid BillRepeatFrequency
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBillRepeatFrequencyFromValue(v string) (*BillRepeatFrequency, error) {
	ev := BillRepeatFrequency(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BillRepeatFrequency: valid values are %v", v, AllowedBillRepeatFrequencyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BillRepeatFrequency) IsValid() bool {
	for _, existing := range AllowedBillRepeatFrequencyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BillRepeatFrequency value
func (v BillRepeatFrequency) Ptr() *BillRepeatFrequency {
	return &v
}

type NullableBillRepeatFrequency struct {
	value *BillRepeatFrequency
	isSet bool
}

func (v NullableBillRepeatFrequency) Get() *BillRepeatFrequency {
	return v.value
}

func (v *NullableBillRepeatFrequency) Set(val *BillRepeatFrequency) {
	v.value = val
	v.isSet = true
}

func (v NullableBillRepeatFrequency) IsSet() bool {
	return v.isSet
}

func (v *NullableBillRepeatFrequency) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBillRepeatFrequency(val *BillRepeatFrequency) *NullableBillRepeatFrequency {
	return &NullableBillRepeatFrequency{value: val, isSet: true}
}

func (v NullableBillRepeatFrequency) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBillRepeatFrequency) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

