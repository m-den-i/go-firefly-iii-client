/*
Firefly III API v2.0.4

Testing BudgetsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/m-den-i/go-firefly-iii-client"
)

func Test_openapi_BudgetsApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test BudgetsApiService DeleteBudget", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.BudgetsApi.DeleteBudget(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BudgetsApiService DeleteBudgetLimit", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var limitId string

		httpRes, err := apiClient.BudgetsApi.DeleteBudgetLimit(context.Background(), id, limitId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BudgetsApiService GetBudget", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.BudgetsApi.GetBudget(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BudgetsApiService GetBudgetLimit", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var limitId int32

		resp, httpRes, err := apiClient.BudgetsApi.GetBudgetLimit(context.Background(), id, limitId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BudgetsApiService ListAttachmentByBudget", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.BudgetsApi.ListAttachmentByBudget(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BudgetsApiService ListBudget", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BudgetsApi.ListBudget(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BudgetsApiService ListBudgetLimit", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BudgetsApi.ListBudgetLimit(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BudgetsApiService ListBudgetLimitByBudget", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.BudgetsApi.ListBudgetLimitByBudget(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BudgetsApiService ListTransactionByBudget", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.BudgetsApi.ListTransactionByBudget(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BudgetsApiService ListTransactionByBudgetLimit", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var limitId string

		resp, httpRes, err := apiClient.BudgetsApi.ListTransactionByBudgetLimit(context.Background(), id, limitId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BudgetsApiService StoreBudget", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BudgetsApi.StoreBudget(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BudgetsApiService StoreBudgetLimit", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.BudgetsApi.StoreBudgetLimit(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BudgetsApiService UpdateBudget", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.BudgetsApi.UpdateBudget(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BudgetsApiService UpdateBudgetLimit", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var limitId string

		resp, httpRes, err := apiClient.BudgetsApi.UpdateBudgetLimit(context.Background(), id, limitId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
