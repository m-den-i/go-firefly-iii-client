/*
Firefly III API v2.0.4

Testing CurrenciesApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/m-den-i/go-firefly-iii-client"
)

func Test_openapi_CurrenciesApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test CurrenciesApiService DefaultCurrency", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string

		resp, httpRes, err := apiClient.CurrenciesApi.DefaultCurrency(context.Background(), code).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CurrenciesApiService DeleteCurrency", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string

		httpRes, err := apiClient.CurrenciesApi.DeleteCurrency(context.Background(), code).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CurrenciesApiService DisableCurrency", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string

		resp, httpRes, err := apiClient.CurrenciesApi.DisableCurrency(context.Background(), code).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CurrenciesApiService EnableCurrency", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string

		resp, httpRes, err := apiClient.CurrenciesApi.EnableCurrency(context.Background(), code).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CurrenciesApiService GetCurrency", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string

		resp, httpRes, err := apiClient.CurrenciesApi.GetCurrency(context.Background(), code).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CurrenciesApiService GetDefaultCurrency", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CurrenciesApi.GetDefaultCurrency(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CurrenciesApiService ListAccountByCurrency", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string

		resp, httpRes, err := apiClient.CurrenciesApi.ListAccountByCurrency(context.Background(), code).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CurrenciesApiService ListAvailableBudgetByCurrency", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string

		resp, httpRes, err := apiClient.CurrenciesApi.ListAvailableBudgetByCurrency(context.Background(), code).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CurrenciesApiService ListBillByCurrency", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string

		resp, httpRes, err := apiClient.CurrenciesApi.ListBillByCurrency(context.Background(), code).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CurrenciesApiService ListBudgetLimitByCurrency", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string

		resp, httpRes, err := apiClient.CurrenciesApi.ListBudgetLimitByCurrency(context.Background(), code).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CurrenciesApiService ListCurrency", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CurrenciesApi.ListCurrency(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CurrenciesApiService ListRecurrenceByCurrency", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string

		resp, httpRes, err := apiClient.CurrenciesApi.ListRecurrenceByCurrency(context.Background(), code).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CurrenciesApiService ListRuleByCurrency", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string

		resp, httpRes, err := apiClient.CurrenciesApi.ListRuleByCurrency(context.Background(), code).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CurrenciesApiService ListTransactionByCurrency", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string

		resp, httpRes, err := apiClient.CurrenciesApi.ListTransactionByCurrency(context.Background(), code).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CurrenciesApiService StoreCurrency", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CurrenciesApi.StoreCurrency(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CurrenciesApiService UpdateCurrency", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string

		resp, httpRes, err := apiClient.CurrenciesApi.UpdateCurrency(context.Background(), code).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
