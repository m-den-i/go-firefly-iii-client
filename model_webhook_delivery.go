/*
Firefly III API v2.0.4

This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2023-06-11T09:14:35+00:00 

API version: 2.0.4
Contact: james@firefly-iii.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// WebhookDelivery Format of the delivered response.
type WebhookDelivery string

// List of WebhookDelivery
const (
	JSON WebhookDelivery = "JSON"
)

// All allowed values of WebhookDelivery enum
var AllowedWebhookDeliveryEnumValues = []WebhookDelivery{
	"JSON",
}

func (v *WebhookDelivery) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WebhookDelivery(value)
	for _, existing := range AllowedWebhookDeliveryEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid WebhookDelivery", value)
}

// NewWebhookDeliveryFromValue returns a pointer to a valid WebhookDelivery
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWebhookDeliveryFromValue(v string) (*WebhookDelivery, error) {
	ev := WebhookDelivery(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for WebhookDelivery: valid values are %v", v, AllowedWebhookDeliveryEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WebhookDelivery) IsValid() bool {
	for _, existing := range AllowedWebhookDeliveryEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to WebhookDelivery value
func (v WebhookDelivery) Ptr() *WebhookDelivery {
	return &v
}

type NullableWebhookDelivery struct {
	value *WebhookDelivery
	isSet bool
}

func (v NullableWebhookDelivery) Get() *WebhookDelivery {
	return v.value
}

func (v *NullableWebhookDelivery) Set(val *WebhookDelivery) {
	v.value = val
	v.isSet = true
}

func (v NullableWebhookDelivery) IsSet() bool {
	return v.isSet
}

func (v *NullableWebhookDelivery) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebhookDelivery(val *WebhookDelivery) *NullableWebhookDelivery {
	return &NullableWebhookDelivery{value: val, isSet: true}
}

func (v NullableWebhookDelivery) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebhookDelivery) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

