/*
Firefly III API v2.0.4

This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2023-06-11T09:14:35+00:00 

API version: 2.0.4
Contact: james@firefly-iii.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// AutoBudgetType The type of auto-budget that Firefly III must create.
type AutoBudgetType string

// List of AutoBudgetType
const (
	RESET AutoBudgetType = "reset"
	ROLLOVER AutoBudgetType = "rollover"
	NONE AutoBudgetType = "none"
	NULL AutoBudgetType = "null"
)

// All allowed values of AutoBudgetType enum
var AllowedAutoBudgetTypeEnumValues = []AutoBudgetType{
	"reset",
	"rollover",
	"none",
	"null",
}

func (v *AutoBudgetType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AutoBudgetType(value)
	for _, existing := range AllowedAutoBudgetTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AutoBudgetType", value)
}

// NewAutoBudgetTypeFromValue returns a pointer to a valid AutoBudgetType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAutoBudgetTypeFromValue(v string) (*AutoBudgetType, error) {
	ev := AutoBudgetType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AutoBudgetType: valid values are %v", v, AllowedAutoBudgetTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AutoBudgetType) IsValid() bool {
	for _, existing := range AllowedAutoBudgetTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AutoBudgetType value
func (v AutoBudgetType) Ptr() *AutoBudgetType {
	return &v
}

type NullableAutoBudgetType struct {
	value *AutoBudgetType
	isSet bool
}

func (v NullableAutoBudgetType) Get() *AutoBudgetType {
	return v.value
}

func (v *NullableAutoBudgetType) Set(val *AutoBudgetType) {
	v.value = val
	v.isSet = true
}

func (v NullableAutoBudgetType) IsSet() bool {
	return v.isSet
}

func (v *NullableAutoBudgetType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAutoBudgetType(val *AutoBudgetType) *NullableAutoBudgetType {
	return &NullableAutoBudgetType{value: val, isSet: true}
}

func (v NullableAutoBudgetType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAutoBudgetType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

