/*
Firefly III API v2.0.4

This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2023-06-11T09:14:35+00:00 

API version: 2.0.4
Contact: james@firefly-iii.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// UserRoleProperty Role for the user. Can be empty or omitted.
type UserRoleProperty string

// List of UserRoleProperty
const (
	OWNER UserRoleProperty = "owner"
	DEMO UserRoleProperty = "demo"
	NULL UserRoleProperty = "null"
)

// All allowed values of UserRoleProperty enum
var AllowedUserRolePropertyEnumValues = []UserRoleProperty{
	"owner",
	"demo",
	"null",
}

func (v *UserRoleProperty) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := UserRoleProperty(value)
	for _, existing := range AllowedUserRolePropertyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid UserRoleProperty", value)
}

// NewUserRolePropertyFromValue returns a pointer to a valid UserRoleProperty
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewUserRolePropertyFromValue(v string) (*UserRoleProperty, error) {
	ev := UserRoleProperty(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for UserRoleProperty: valid values are %v", v, AllowedUserRolePropertyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v UserRoleProperty) IsValid() bool {
	for _, existing := range AllowedUserRolePropertyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to UserRoleProperty value
func (v UserRoleProperty) Ptr() *UserRoleProperty {
	return &v
}

type NullableUserRoleProperty struct {
	value *UserRoleProperty
	isSet bool
}

func (v NullableUserRoleProperty) Get() *UserRoleProperty {
	return v.value
}

func (v *NullableUserRoleProperty) Set(val *UserRoleProperty) {
	v.value = val
	v.isSet = true
}

func (v NullableUserRoleProperty) IsSet() bool {
	return v.isSet
}

func (v *NullableUserRoleProperty) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserRoleProperty(val *UserRoleProperty) *NullableUserRoleProperty {
	return &NullableUserRoleProperty{value: val, isSet: true}
}

func (v NullableUserRoleProperty) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserRoleProperty) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

