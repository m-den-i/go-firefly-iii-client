/*
Firefly III API v2.0.4

This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2023-06-11T09:14:35+00:00 

API version: 2.0.4
Contact: james@firefly-iii.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// AccountRoleProperty Is only mandatory when the type is asset.
type AccountRoleProperty string

// List of AccountRoleProperty
const (
	DEFAULT_ASSET AccountRoleProperty = "defaultAsset"
	SHARED_ASSET AccountRoleProperty = "sharedAsset"
	SAVING_ASSET AccountRoleProperty = "savingAsset"
	CC_ASSET AccountRoleProperty = "ccAsset"
	CASH_WALLET_ASSET AccountRoleProperty = "cashWalletAsset"
	NULL AccountRoleProperty = "null"
)

// All allowed values of AccountRoleProperty enum
var AllowedAccountRolePropertyEnumValues = []AccountRoleProperty{
	"defaultAsset",
	"sharedAsset",
	"savingAsset",
	"ccAsset",
	"cashWalletAsset",
	"null",
}

func (v *AccountRoleProperty) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AccountRoleProperty(value)
	for _, existing := range AllowedAccountRolePropertyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AccountRoleProperty", value)
}

// NewAccountRolePropertyFromValue returns a pointer to a valid AccountRoleProperty
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAccountRolePropertyFromValue(v string) (*AccountRoleProperty, error) {
	ev := AccountRoleProperty(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AccountRoleProperty: valid values are %v", v, AllowedAccountRolePropertyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AccountRoleProperty) IsValid() bool {
	for _, existing := range AllowedAccountRolePropertyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AccountRoleProperty value
func (v AccountRoleProperty) Ptr() *AccountRoleProperty {
	return &v
}

type NullableAccountRoleProperty struct {
	value *AccountRoleProperty
	isSet bool
}

func (v NullableAccountRoleProperty) Get() *AccountRoleProperty {
	return v.value
}

func (v *NullableAccountRoleProperty) Set(val *AccountRoleProperty) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountRoleProperty) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountRoleProperty) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountRoleProperty(val *AccountRoleProperty) *NullableAccountRoleProperty {
	return &NullableAccountRoleProperty{value: val, isSet: true}
}

func (v NullableAccountRoleProperty) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountRoleProperty) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

