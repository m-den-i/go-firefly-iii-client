/*
Firefly III API v2.0.4

This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2023-06-11T09:14:35+00:00 

API version: 2.0.4
Contact: james@firefly-iii.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// RuleTriggerType Which action is necessary for the rule to fire? Use either store-journal or update-journal.
type RuleTriggerType string

// List of RuleTriggerType
const (
	STORE_JOURNAL RuleTriggerType = "store-journal"
	UPDATE_JOURNAL RuleTriggerType = "update-journal"
)

// All allowed values of RuleTriggerType enum
var AllowedRuleTriggerTypeEnumValues = []RuleTriggerType{
	"store-journal",
	"update-journal",
}

func (v *RuleTriggerType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RuleTriggerType(value)
	for _, existing := range AllowedRuleTriggerTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RuleTriggerType", value)
}

// NewRuleTriggerTypeFromValue returns a pointer to a valid RuleTriggerType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRuleTriggerTypeFromValue(v string) (*RuleTriggerType, error) {
	ev := RuleTriggerType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RuleTriggerType: valid values are %v", v, AllowedRuleTriggerTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RuleTriggerType) IsValid() bool {
	for _, existing := range AllowedRuleTriggerTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RuleTriggerType value
func (v RuleTriggerType) Ptr() *RuleTriggerType {
	return &v
}

type NullableRuleTriggerType struct {
	value *RuleTriggerType
	isSet bool
}

func (v NullableRuleTriggerType) Get() *RuleTriggerType {
	return v.value
}

func (v *NullableRuleTriggerType) Set(val *RuleTriggerType) {
	v.value = val
	v.isSet = true
}

func (v NullableRuleTriggerType) IsSet() bool {
	return v.isSet
}

func (v *NullableRuleTriggerType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRuleTriggerType(val *RuleTriggerType) *NullableRuleTriggerType {
	return &NullableRuleTriggerType{value: val, isSet: true}
}

func (v NullableRuleTriggerType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRuleTriggerType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

