/*
Firefly III API v2.0.4

This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2023-06-11T09:14:35+00:00 

API version: 2.0.4
Contact: james@firefly-iii.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// TransactionTypeProperty the model 'TransactionTypeProperty'
type TransactionTypeProperty string

// List of TransactionTypeProperty
const (
	WITHDRAWAL TransactionTypeProperty = "withdrawal"
	DEPOSIT TransactionTypeProperty = "deposit"
	TRANSFER TransactionTypeProperty = "transfer"
	RECONCILIATION TransactionTypeProperty = "reconciliation"
	OPENING_BALANCE TransactionTypeProperty = "opening balance"
)

// All allowed values of TransactionTypeProperty enum
var AllowedTransactionTypePropertyEnumValues = []TransactionTypeProperty{
	"withdrawal",
	"deposit",
	"transfer",
	"reconciliation",
	"opening balance",
}

func (v *TransactionTypeProperty) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TransactionTypeProperty(value)
	for _, existing := range AllowedTransactionTypePropertyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TransactionTypeProperty", value)
}

// NewTransactionTypePropertyFromValue returns a pointer to a valid TransactionTypeProperty
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTransactionTypePropertyFromValue(v string) (*TransactionTypeProperty, error) {
	ev := TransactionTypeProperty(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TransactionTypeProperty: valid values are %v", v, AllowedTransactionTypePropertyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TransactionTypeProperty) IsValid() bool {
	for _, existing := range AllowedTransactionTypePropertyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TransactionTypeProperty value
func (v TransactionTypeProperty) Ptr() *TransactionTypeProperty {
	return &v
}

type NullableTransactionTypeProperty struct {
	value *TransactionTypeProperty
	isSet bool
}

func (v NullableTransactionTypeProperty) Get() *TransactionTypeProperty {
	return v.value
}

func (v *NullableTransactionTypeProperty) Set(val *TransactionTypeProperty) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionTypeProperty) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionTypeProperty) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionTypeProperty(val *TransactionTypeProperty) *NullableTransactionTypeProperty {
	return &NullableTransactionTypeProperty{value: val, isSet: true}
}

func (v NullableTransactionTypeProperty) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionTypeProperty) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

