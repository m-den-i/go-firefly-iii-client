/*
Firefly III API v2.0.4

This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2023-06-11T09:14:35+00:00 

API version: 2.0.4
Contact: james@firefly-iii.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// InterestPeriod Mandatory when type is liability. Period over which the interest is calculated.
type InterestPeriod string

// List of InterestPeriod
const (
	WEEKLY InterestPeriod = "weekly"
	MONTHLY InterestPeriod = "monthly"
	QUARTERLY InterestPeriod = "quarterly"
	HALF_YEAR InterestPeriod = "half-year"
	YEARLY InterestPeriod = "yearly"
	NULL InterestPeriod = "null"
)

// All allowed values of InterestPeriod enum
var AllowedInterestPeriodEnumValues = []InterestPeriod{
	"weekly",
	"monthly",
	"quarterly",
	"half-year",
	"yearly",
	"null",
}

func (v *InterestPeriod) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := InterestPeriod(value)
	for _, existing := range AllowedInterestPeriodEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid InterestPeriod", value)
}

// NewInterestPeriodFromValue returns a pointer to a valid InterestPeriod
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewInterestPeriodFromValue(v string) (*InterestPeriod, error) {
	ev := InterestPeriod(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for InterestPeriod: valid values are %v", v, AllowedInterestPeriodEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v InterestPeriod) IsValid() bool {
	for _, existing := range AllowedInterestPeriodEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to InterestPeriod value
func (v InterestPeriod) Ptr() *InterestPeriod {
	return &v
}

type NullableInterestPeriod struct {
	value *InterestPeriod
	isSet bool
}

func (v NullableInterestPeriod) Get() *InterestPeriod {
	return v.value
}

func (v *NullableInterestPeriod) Set(val *InterestPeriod) {
	v.value = val
	v.isSet = true
}

func (v NullableInterestPeriod) IsSet() bool {
	return v.isSet
}

func (v *NullableInterestPeriod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInterestPeriod(val *InterestPeriod) *NullableInterestPeriod {
	return &NullableInterestPeriod{value: val, isSet: true}
}

func (v NullableInterestPeriod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInterestPeriod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

