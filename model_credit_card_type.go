/*
Firefly III API v2.0.4

This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2023-06-11T09:14:35+00:00 

API version: 2.0.4
Contact: james@firefly-iii.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// CreditCardType Mandatory when the account_role is ccAsset. Can only be monthlyFull or null.
type CreditCardType string

// List of CreditCardType
const (
	MONTHLY_FULL CreditCardType = "monthlyFull"
	NULL CreditCardType = "null"
)

// All allowed values of CreditCardType enum
var AllowedCreditCardTypeEnumValues = []CreditCardType{
	"monthlyFull",
	"null",
}

func (v *CreditCardType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CreditCardType(value)
	for _, existing := range AllowedCreditCardTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CreditCardType", value)
}

// NewCreditCardTypeFromValue returns a pointer to a valid CreditCardType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCreditCardTypeFromValue(v string) (*CreditCardType, error) {
	ev := CreditCardType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CreditCardType: valid values are %v", v, AllowedCreditCardTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CreditCardType) IsValid() bool {
	for _, existing := range AllowedCreditCardTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CreditCardType value
func (v CreditCardType) Ptr() *CreditCardType {
	return &v
}

type NullableCreditCardType struct {
	value *CreditCardType
	isSet bool
}

func (v NullableCreditCardType) Get() *CreditCardType {
	return v.value
}

func (v *NullableCreditCardType) Set(val *CreditCardType) {
	v.value = val
	v.isSet = true
}

func (v NullableCreditCardType) IsSet() bool {
	return v.isSet
}

func (v *NullableCreditCardType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreditCardType(val *CreditCardType) *NullableCreditCardType {
	return &NullableCreditCardType{value: val, isSet: true}
}

func (v NullableCreditCardType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreditCardType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

