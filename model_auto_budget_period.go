/*
Firefly III API v2.0.4

This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2023-06-11T09:14:35+00:00 

API version: 2.0.4
Contact: james@firefly-iii.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// AutoBudgetPeriod Period for the auto budget
type AutoBudgetPeriod string

// List of AutoBudgetPeriod
const (
	DAILY AutoBudgetPeriod = "daily"
	WEEKLY AutoBudgetPeriod = "weekly"
	MONTHLY AutoBudgetPeriod = "monthly"
	QUARTERLY AutoBudgetPeriod = "quarterly"
	HALF_YEAR AutoBudgetPeriod = "half-year"
	YEARLY AutoBudgetPeriod = "yearly"
	NULL AutoBudgetPeriod = "null"
)

// All allowed values of AutoBudgetPeriod enum
var AllowedAutoBudgetPeriodEnumValues = []AutoBudgetPeriod{
	"daily",
	"weekly",
	"monthly",
	"quarterly",
	"half-year",
	"yearly",
	"null",
}

func (v *AutoBudgetPeriod) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AutoBudgetPeriod(value)
	for _, existing := range AllowedAutoBudgetPeriodEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AutoBudgetPeriod", value)
}

// NewAutoBudgetPeriodFromValue returns a pointer to a valid AutoBudgetPeriod
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAutoBudgetPeriodFromValue(v string) (*AutoBudgetPeriod, error) {
	ev := AutoBudgetPeriod(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AutoBudgetPeriod: valid values are %v", v, AllowedAutoBudgetPeriodEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AutoBudgetPeriod) IsValid() bool {
	for _, existing := range AllowedAutoBudgetPeriodEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AutoBudgetPeriod value
func (v AutoBudgetPeriod) Ptr() *AutoBudgetPeriod {
	return &v
}

type NullableAutoBudgetPeriod struct {
	value *AutoBudgetPeriod
	isSet bool
}

func (v NullableAutoBudgetPeriod) Get() *AutoBudgetPeriod {
	return v.value
}

func (v *NullableAutoBudgetPeriod) Set(val *AutoBudgetPeriod) {
	v.value = val
	v.isSet = true
}

func (v NullableAutoBudgetPeriod) IsSet() bool {
	return v.isSet
}

func (v *NullableAutoBudgetPeriod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAutoBudgetPeriod(val *AutoBudgetPeriod) *NullableAutoBudgetPeriod {
	return &NullableAutoBudgetPeriod{value: val, isSet: true}
}

func (v NullableAutoBudgetPeriod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAutoBudgetPeriod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

