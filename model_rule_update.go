/*
Firefly III API v2.0.4

This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2023-06-11T09:14:35+00:00 

API version: 2.0.4
Contact: james@firefly-iii.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RuleUpdate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RuleUpdate{}

// RuleUpdate struct for RuleUpdate
type RuleUpdate struct {
	Title *string `json:"title,omitempty"`
	Description *string `json:"description,omitempty"`
	// ID of the rule group under which the rule must be stored. Either this field or rule_group_title is mandatory.
	RuleGroupId *string `json:"rule_group_id,omitempty"`
	Order *int32 `json:"order,omitempty"`
	Trigger *RuleTriggerType `json:"trigger,omitempty"`
	// Whether or not the rule is even active. Default is true.
	Active *bool `json:"active,omitempty"`
	// If the rule is set to be strict, ALL triggers must hit in order for the rule to fire. Otherwise, just one is enough. Default value is true.
	Strict *bool `json:"strict,omitempty"`
	// If this value is true and the rule is triggered, other rules  after this one in the group will be skipped. Default value is false.
	StopProcessing *bool `json:"stop_processing,omitempty"`
	Triggers []RuleTriggerUpdate `json:"triggers,omitempty"`
	Actions []RuleActionUpdate `json:"actions,omitempty"`
}

// NewRuleUpdate instantiates a new RuleUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRuleUpdate() *RuleUpdate {
	this := RuleUpdate{}
	var active bool = true
	this.Active = &active
	var stopProcessing bool = false
	this.StopProcessing = &stopProcessing
	return &this
}

// NewRuleUpdateWithDefaults instantiates a new RuleUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRuleUpdateWithDefaults() *RuleUpdate {
	this := RuleUpdate{}
	var active bool = true
	this.Active = &active
	var stopProcessing bool = false
	this.StopProcessing = &stopProcessing
	return &this
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *RuleUpdate) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleUpdate) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *RuleUpdate) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *RuleUpdate) SetTitle(v string) {
	o.Title = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *RuleUpdate) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleUpdate) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *RuleUpdate) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *RuleUpdate) SetDescription(v string) {
	o.Description = &v
}

// GetRuleGroupId returns the RuleGroupId field value if set, zero value otherwise.
func (o *RuleUpdate) GetRuleGroupId() string {
	if o == nil || IsNil(o.RuleGroupId) {
		var ret string
		return ret
	}
	return *o.RuleGroupId
}

// GetRuleGroupIdOk returns a tuple with the RuleGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleUpdate) GetRuleGroupIdOk() (*string, bool) {
	if o == nil || IsNil(o.RuleGroupId) {
		return nil, false
	}
	return o.RuleGroupId, true
}

// HasRuleGroupId returns a boolean if a field has been set.
func (o *RuleUpdate) HasRuleGroupId() bool {
	if o != nil && !IsNil(o.RuleGroupId) {
		return true
	}

	return false
}

// SetRuleGroupId gets a reference to the given string and assigns it to the RuleGroupId field.
func (o *RuleUpdate) SetRuleGroupId(v string) {
	o.RuleGroupId = &v
}

// GetOrder returns the Order field value if set, zero value otherwise.
func (o *RuleUpdate) GetOrder() int32 {
	if o == nil || IsNil(o.Order) {
		var ret int32
		return ret
	}
	return *o.Order
}

// GetOrderOk returns a tuple with the Order field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleUpdate) GetOrderOk() (*int32, bool) {
	if o == nil || IsNil(o.Order) {
		return nil, false
	}
	return o.Order, true
}

// HasOrder returns a boolean if a field has been set.
func (o *RuleUpdate) HasOrder() bool {
	if o != nil && !IsNil(o.Order) {
		return true
	}

	return false
}

// SetOrder gets a reference to the given int32 and assigns it to the Order field.
func (o *RuleUpdate) SetOrder(v int32) {
	o.Order = &v
}

// GetTrigger returns the Trigger field value if set, zero value otherwise.
func (o *RuleUpdate) GetTrigger() RuleTriggerType {
	if o == nil || IsNil(o.Trigger) {
		var ret RuleTriggerType
		return ret
	}
	return *o.Trigger
}

// GetTriggerOk returns a tuple with the Trigger field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleUpdate) GetTriggerOk() (*RuleTriggerType, bool) {
	if o == nil || IsNil(o.Trigger) {
		return nil, false
	}
	return o.Trigger, true
}

// HasTrigger returns a boolean if a field has been set.
func (o *RuleUpdate) HasTrigger() bool {
	if o != nil && !IsNil(o.Trigger) {
		return true
	}

	return false
}

// SetTrigger gets a reference to the given RuleTriggerType and assigns it to the Trigger field.
func (o *RuleUpdate) SetTrigger(v RuleTriggerType) {
	o.Trigger = &v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *RuleUpdate) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleUpdate) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *RuleUpdate) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *RuleUpdate) SetActive(v bool) {
	o.Active = &v
}

// GetStrict returns the Strict field value if set, zero value otherwise.
func (o *RuleUpdate) GetStrict() bool {
	if o == nil || IsNil(o.Strict) {
		var ret bool
		return ret
	}
	return *o.Strict
}

// GetStrictOk returns a tuple with the Strict field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleUpdate) GetStrictOk() (*bool, bool) {
	if o == nil || IsNil(o.Strict) {
		return nil, false
	}
	return o.Strict, true
}

// HasStrict returns a boolean if a field has been set.
func (o *RuleUpdate) HasStrict() bool {
	if o != nil && !IsNil(o.Strict) {
		return true
	}

	return false
}

// SetStrict gets a reference to the given bool and assigns it to the Strict field.
func (o *RuleUpdate) SetStrict(v bool) {
	o.Strict = &v
}

// GetStopProcessing returns the StopProcessing field value if set, zero value otherwise.
func (o *RuleUpdate) GetStopProcessing() bool {
	if o == nil || IsNil(o.StopProcessing) {
		var ret bool
		return ret
	}
	return *o.StopProcessing
}

// GetStopProcessingOk returns a tuple with the StopProcessing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleUpdate) GetStopProcessingOk() (*bool, bool) {
	if o == nil || IsNil(o.StopProcessing) {
		return nil, false
	}
	return o.StopProcessing, true
}

// HasStopProcessing returns a boolean if a field has been set.
func (o *RuleUpdate) HasStopProcessing() bool {
	if o != nil && !IsNil(o.StopProcessing) {
		return true
	}

	return false
}

// SetStopProcessing gets a reference to the given bool and assigns it to the StopProcessing field.
func (o *RuleUpdate) SetStopProcessing(v bool) {
	o.StopProcessing = &v
}

// GetTriggers returns the Triggers field value if set, zero value otherwise.
func (o *RuleUpdate) GetTriggers() []RuleTriggerUpdate {
	if o == nil || IsNil(o.Triggers) {
		var ret []RuleTriggerUpdate
		return ret
	}
	return o.Triggers
}

// GetTriggersOk returns a tuple with the Triggers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleUpdate) GetTriggersOk() ([]RuleTriggerUpdate, bool) {
	if o == nil || IsNil(o.Triggers) {
		return nil, false
	}
	return o.Triggers, true
}

// HasTriggers returns a boolean if a field has been set.
func (o *RuleUpdate) HasTriggers() bool {
	if o != nil && !IsNil(o.Triggers) {
		return true
	}

	return false
}

// SetTriggers gets a reference to the given []RuleTriggerUpdate and assigns it to the Triggers field.
func (o *RuleUpdate) SetTriggers(v []RuleTriggerUpdate) {
	o.Triggers = v
}

// GetActions returns the Actions field value if set, zero value otherwise.
func (o *RuleUpdate) GetActions() []RuleActionUpdate {
	if o == nil || IsNil(o.Actions) {
		var ret []RuleActionUpdate
		return ret
	}
	return o.Actions
}

// GetActionsOk returns a tuple with the Actions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleUpdate) GetActionsOk() ([]RuleActionUpdate, bool) {
	if o == nil || IsNil(o.Actions) {
		return nil, false
	}
	return o.Actions, true
}

// HasActions returns a boolean if a field has been set.
func (o *RuleUpdate) HasActions() bool {
	if o != nil && !IsNil(o.Actions) {
		return true
	}

	return false
}

// SetActions gets a reference to the given []RuleActionUpdate and assigns it to the Actions field.
func (o *RuleUpdate) SetActions(v []RuleActionUpdate) {
	o.Actions = v
}

func (o RuleUpdate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RuleUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.RuleGroupId) {
		toSerialize["rule_group_id"] = o.RuleGroupId
	}
	if !IsNil(o.Order) {
		toSerialize["order"] = o.Order
	}
	if !IsNil(o.Trigger) {
		toSerialize["trigger"] = o.Trigger
	}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.Strict) {
		toSerialize["strict"] = o.Strict
	}
	if !IsNil(o.StopProcessing) {
		toSerialize["stop_processing"] = o.StopProcessing
	}
	if !IsNil(o.Triggers) {
		toSerialize["triggers"] = o.Triggers
	}
	if !IsNil(o.Actions) {
		toSerialize["actions"] = o.Actions
	}
	return toSerialize, nil
}

type NullableRuleUpdate struct {
	value *RuleUpdate
	isSet bool
}

func (v NullableRuleUpdate) Get() *RuleUpdate {
	return v.value
}

func (v *NullableRuleUpdate) Set(val *RuleUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableRuleUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableRuleUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRuleUpdate(val *RuleUpdate) *NullableRuleUpdate {
	return &NullableRuleUpdate{value: val, isSet: true}
}

func (v NullableRuleUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRuleUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


