/*
Firefly III API v2.0.4

This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2023-06-11T09:14:35+00:00 

API version: 2.0.4
Contact: james@firefly-iii.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the AvailableBudgetSingle type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AvailableBudgetSingle{}

// AvailableBudgetSingle struct for AvailableBudgetSingle
type AvailableBudgetSingle struct {
	Data AvailableBudgetRead `json:"data"`
}

// NewAvailableBudgetSingle instantiates a new AvailableBudgetSingle object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAvailableBudgetSingle(data AvailableBudgetRead) *AvailableBudgetSingle {
	this := AvailableBudgetSingle{}
	this.Data = data
	return &this
}

// NewAvailableBudgetSingleWithDefaults instantiates a new AvailableBudgetSingle object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAvailableBudgetSingleWithDefaults() *AvailableBudgetSingle {
	this := AvailableBudgetSingle{}
	return &this
}

// GetData returns the Data field value
func (o *AvailableBudgetSingle) GetData() AvailableBudgetRead {
	if o == nil {
		var ret AvailableBudgetRead
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *AvailableBudgetSingle) GetDataOk() (*AvailableBudgetRead, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *AvailableBudgetSingle) SetData(v AvailableBudgetRead) {
	o.Data = v
}

func (o AvailableBudgetSingle) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AvailableBudgetSingle) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["data"] = o.Data
	return toSerialize, nil
}

type NullableAvailableBudgetSingle struct {
	value *AvailableBudgetSingle
	isSet bool
}

func (v NullableAvailableBudgetSingle) Get() *AvailableBudgetSingle {
	return v.value
}

func (v *NullableAvailableBudgetSingle) Set(val *AvailableBudgetSingle) {
	v.value = val
	v.isSet = true
}

func (v NullableAvailableBudgetSingle) IsSet() bool {
	return v.isSet
}

func (v *NullableAvailableBudgetSingle) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAvailableBudgetSingle(val *AvailableBudgetSingle) *NullableAvailableBudgetSingle {
	return &NullableAvailableBudgetSingle{value: val, isSet: true}
}

func (v NullableAvailableBudgetSingle) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAvailableBudgetSingle) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


