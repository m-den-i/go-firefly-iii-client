/*
Firefly III API v2.0.4

This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2023-06-11T09:14:35+00:00 

API version: 2.0.4
Contact: james@firefly-iii.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// AccountTypeFilter the model 'AccountTypeFilter'
type AccountTypeFilter string

// List of AccountTypeFilter
const (
	ALL AccountTypeFilter = "all"
	ASSET AccountTypeFilter = "asset"
	CASH AccountTypeFilter = "cash"
	EXPENSE AccountTypeFilter = "expense"
	REVENUE AccountTypeFilter = "revenue"
	SPECIAL AccountTypeFilter = "special"
	HIDDEN AccountTypeFilter = "hidden"
	LIABILITY AccountTypeFilter = "liability"
	LIABILITIES AccountTypeFilter = "liabilities"
	DEFAULT_ACCOUNT AccountTypeFilter = "Default account"
	CASH_ACCOUNT AccountTypeFilter = "Cash account"
	ASSET_ACCOUNT AccountTypeFilter = "Asset account"
	EXPENSE_ACCOUNT AccountTypeFilter = "Expense account"
	REVENUE_ACCOUNT AccountTypeFilter = "Revenue account"
	INITIAL_BALANCE_ACCOUNT AccountTypeFilter = "Initial balance account"
	BENEFICIARY_ACCOUNT AccountTypeFilter = "Beneficiary account"
	IMPORT_ACCOUNT AccountTypeFilter = "Import account"
	RECONCILIATION_ACCOUNT AccountTypeFilter = "Reconciliation account"
	LOAN AccountTypeFilter = "Loan"
	DEBT AccountTypeFilter = "Debt"
	MORTGAGE AccountTypeFilter = "Mortgage"
)

// All allowed values of AccountTypeFilter enum
var AllowedAccountTypeFilterEnumValues = []AccountTypeFilter{
	"all",
	"asset",
	"cash",
	"expense",
	"revenue",
	"special",
	"hidden",
	"liability",
	"liabilities",
	"Default account",
	"Cash account",
	"Asset account",
	"Expense account",
	"Revenue account",
	"Initial balance account",
	"Beneficiary account",
	"Import account",
	"Reconciliation account",
	"Loan",
	"Debt",
	"Mortgage",
}

func (v *AccountTypeFilter) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AccountTypeFilter(value)
	for _, existing := range AllowedAccountTypeFilterEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AccountTypeFilter", value)
}

// NewAccountTypeFilterFromValue returns a pointer to a valid AccountTypeFilter
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAccountTypeFilterFromValue(v string) (*AccountTypeFilter, error) {
	ev := AccountTypeFilter(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AccountTypeFilter: valid values are %v", v, AllowedAccountTypeFilterEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AccountTypeFilter) IsValid() bool {
	for _, existing := range AllowedAccountTypeFilterEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AccountTypeFilter value
func (v AccountTypeFilter) Ptr() *AccountTypeFilter {
	return &v
}

type NullableAccountTypeFilter struct {
	value *AccountTypeFilter
	isSet bool
}

func (v NullableAccountTypeFilter) Get() *AccountTypeFilter {
	return v.value
}

func (v *NullableAccountTypeFilter) Set(val *AccountTypeFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountTypeFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountTypeFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountTypeFilter(val *AccountTypeFilter) *NullableAccountTypeFilter {
	return &NullableAccountTypeFilter{value: val, isSet: true}
}

func (v NullableAccountTypeFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountTypeFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

