/*
Firefly III API v2.0.4

This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2023-06-11T09:14:35+00:00 

API version: 2.0.4
Contact: james@firefly-iii.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CategoryUpdate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CategoryUpdate{}

// CategoryUpdate struct for CategoryUpdate
type CategoryUpdate struct {
	Name *string `json:"name,omitempty"`
	Notes NullableString `json:"notes,omitempty"`
}

// NewCategoryUpdate instantiates a new CategoryUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCategoryUpdate() *CategoryUpdate {
	this := CategoryUpdate{}
	return &this
}

// NewCategoryUpdateWithDefaults instantiates a new CategoryUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCategoryUpdateWithDefaults() *CategoryUpdate {
	this := CategoryUpdate{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CategoryUpdate) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategoryUpdate) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CategoryUpdate) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CategoryUpdate) SetName(v string) {
	o.Name = &v
}

// GetNotes returns the Notes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CategoryUpdate) GetNotes() string {
	if o == nil || IsNil(o.Notes.Get()) {
		var ret string
		return ret
	}
	return *o.Notes.Get()
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CategoryUpdate) GetNotesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Notes.Get(), o.Notes.IsSet()
}

// HasNotes returns a boolean if a field has been set.
func (o *CategoryUpdate) HasNotes() bool {
	if o != nil && o.Notes.IsSet() {
		return true
	}

	return false
}

// SetNotes gets a reference to the given NullableString and assigns it to the Notes field.
func (o *CategoryUpdate) SetNotes(v string) {
	o.Notes.Set(&v)
}
// SetNotesNil sets the value for Notes to be an explicit nil
func (o *CategoryUpdate) SetNotesNil() {
	o.Notes.Set(nil)
}

// UnsetNotes ensures that no value is present for Notes, not even an explicit nil
func (o *CategoryUpdate) UnsetNotes() {
	o.Notes.Unset()
}

func (o CategoryUpdate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CategoryUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if o.Notes.IsSet() {
		toSerialize["notes"] = o.Notes.Get()
	}
	return toSerialize, nil
}

type NullableCategoryUpdate struct {
	value *CategoryUpdate
	isSet bool
}

func (v NullableCategoryUpdate) Get() *CategoryUpdate {
	return v.value
}

func (v *NullableCategoryUpdate) Set(val *CategoryUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableCategoryUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableCategoryUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCategoryUpdate(val *CategoryUpdate) *NullableCategoryUpdate {
	return &NullableCategoryUpdate{value: val, isSet: true}
}

func (v NullableCategoryUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCategoryUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


