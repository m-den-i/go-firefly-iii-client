/*
Firefly III API v2.0.4

This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2023-06-11T09:14:35+00:00 

API version: 2.0.4
Contact: james@firefly-iii.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CurrencyStore type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CurrencyStore{}

// CurrencyStore struct for CurrencyStore
type CurrencyStore struct {
	// Defaults to true
	Enabled *bool `json:"enabled,omitempty"`
	// Make this currency the default currency.
	Default *bool `json:"default,omitempty"`
	Code string `json:"code"`
	Name string `json:"name"`
	Symbol string `json:"symbol"`
	// Supports 0-16 decimals.
	DecimalPlaces *int32 `json:"decimal_places,omitempty"`
}

// NewCurrencyStore instantiates a new CurrencyStore object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCurrencyStore(code string, name string, symbol string) *CurrencyStore {
	this := CurrencyStore{}
	var enabled bool = true
	this.Enabled = &enabled
	this.Code = code
	this.Name = name
	this.Symbol = symbol
	return &this
}

// NewCurrencyStoreWithDefaults instantiates a new CurrencyStore object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCurrencyStoreWithDefaults() *CurrencyStore {
	this := CurrencyStore{}
	var enabled bool = true
	this.Enabled = &enabled
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *CurrencyStore) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CurrencyStore) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *CurrencyStore) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *CurrencyStore) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetDefault returns the Default field value if set, zero value otherwise.
func (o *CurrencyStore) GetDefault() bool {
	if o == nil || IsNil(o.Default) {
		var ret bool
		return ret
	}
	return *o.Default
}

// GetDefaultOk returns a tuple with the Default field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CurrencyStore) GetDefaultOk() (*bool, bool) {
	if o == nil || IsNil(o.Default) {
		return nil, false
	}
	return o.Default, true
}

// HasDefault returns a boolean if a field has been set.
func (o *CurrencyStore) HasDefault() bool {
	if o != nil && !IsNil(o.Default) {
		return true
	}

	return false
}

// SetDefault gets a reference to the given bool and assigns it to the Default field.
func (o *CurrencyStore) SetDefault(v bool) {
	o.Default = &v
}

// GetCode returns the Code field value
func (o *CurrencyStore) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *CurrencyStore) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *CurrencyStore) SetCode(v string) {
	o.Code = v
}

// GetName returns the Name field value
func (o *CurrencyStore) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CurrencyStore) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CurrencyStore) SetName(v string) {
	o.Name = v
}

// GetSymbol returns the Symbol field value
func (o *CurrencyStore) GetSymbol() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value
// and a boolean to check if the value has been set.
func (o *CurrencyStore) GetSymbolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Symbol, true
}

// SetSymbol sets field value
func (o *CurrencyStore) SetSymbol(v string) {
	o.Symbol = v
}

// GetDecimalPlaces returns the DecimalPlaces field value if set, zero value otherwise.
func (o *CurrencyStore) GetDecimalPlaces() int32 {
	if o == nil || IsNil(o.DecimalPlaces) {
		var ret int32
		return ret
	}
	return *o.DecimalPlaces
}

// GetDecimalPlacesOk returns a tuple with the DecimalPlaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CurrencyStore) GetDecimalPlacesOk() (*int32, bool) {
	if o == nil || IsNil(o.DecimalPlaces) {
		return nil, false
	}
	return o.DecimalPlaces, true
}

// HasDecimalPlaces returns a boolean if a field has been set.
func (o *CurrencyStore) HasDecimalPlaces() bool {
	if o != nil && !IsNil(o.DecimalPlaces) {
		return true
	}

	return false
}

// SetDecimalPlaces gets a reference to the given int32 and assigns it to the DecimalPlaces field.
func (o *CurrencyStore) SetDecimalPlaces(v int32) {
	o.DecimalPlaces = &v
}

func (o CurrencyStore) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CurrencyStore) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Default) {
		toSerialize["default"] = o.Default
	}
	toSerialize["code"] = o.Code
	toSerialize["name"] = o.Name
	toSerialize["symbol"] = o.Symbol
	if !IsNil(o.DecimalPlaces) {
		toSerialize["decimal_places"] = o.DecimalPlaces
	}
	return toSerialize, nil
}

type NullableCurrencyStore struct {
	value *CurrencyStore
	isSet bool
}

func (v NullableCurrencyStore) Get() *CurrencyStore {
	return v.value
}

func (v *NullableCurrencyStore) Set(val *CurrencyStore) {
	v.value = val
	v.isSet = true
}

func (v NullableCurrencyStore) IsSet() bool {
	return v.isSet
}

func (v *NullableCurrencyStore) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCurrencyStore(val *CurrencyStore) *NullableCurrencyStore {
	return &NullableCurrencyStore{value: val, isSet: true}
}

func (v NullableCurrencyStore) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCurrencyStore) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


