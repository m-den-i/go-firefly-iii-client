/*
Firefly III API v2.0.4

This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2023-06-11T09:14:35+00:00 

API version: 2.0.4
Contact: james@firefly-iii.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ShortAccountTypeProperty Can only be one one these account types. import, initial-balance and reconciliation cannot be set manually.
type ShortAccountTypeProperty string

// List of ShortAccountTypeProperty
const (
	ASSET ShortAccountTypeProperty = "asset"
	EXPENSE ShortAccountTypeProperty = "expense"
	IMPORT ShortAccountTypeProperty = "import"
	REVENUE ShortAccountTypeProperty = "revenue"
	CASH ShortAccountTypeProperty = "cash"
	LIABILITY ShortAccountTypeProperty = "liability"
	LIABILITIES ShortAccountTypeProperty = "liabilities"
	INITIAL_BALANCE ShortAccountTypeProperty = "initial-balance"
	RECONCILIATION ShortAccountTypeProperty = "reconciliation"
)

// All allowed values of ShortAccountTypeProperty enum
var AllowedShortAccountTypePropertyEnumValues = []ShortAccountTypeProperty{
	"asset",
	"expense",
	"import",
	"revenue",
	"cash",
	"liability",
	"liabilities",
	"initial-balance",
	"reconciliation",
}

func (v *ShortAccountTypeProperty) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ShortAccountTypeProperty(value)
	for _, existing := range AllowedShortAccountTypePropertyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ShortAccountTypeProperty", value)
}

// NewShortAccountTypePropertyFromValue returns a pointer to a valid ShortAccountTypeProperty
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewShortAccountTypePropertyFromValue(v string) (*ShortAccountTypeProperty, error) {
	ev := ShortAccountTypeProperty(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ShortAccountTypeProperty: valid values are %v", v, AllowedShortAccountTypePropertyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ShortAccountTypeProperty) IsValid() bool {
	for _, existing := range AllowedShortAccountTypePropertyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ShortAccountTypeProperty value
func (v ShortAccountTypeProperty) Ptr() *ShortAccountTypeProperty {
	return &v
}

type NullableShortAccountTypeProperty struct {
	value *ShortAccountTypeProperty
	isSet bool
}

func (v NullableShortAccountTypeProperty) Get() *ShortAccountTypeProperty {
	return v.value
}

func (v *NullableShortAccountTypeProperty) Set(val *ShortAccountTypeProperty) {
	v.value = val
	v.isSet = true
}

func (v NullableShortAccountTypeProperty) IsSet() bool {
	return v.isSet
}

func (v *NullableShortAccountTypeProperty) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableShortAccountTypeProperty(val *ShortAccountTypeProperty) *NullableShortAccountTypeProperty {
	return &NullableShortAccountTypeProperty{value: val, isSet: true}
}

func (v NullableShortAccountTypeProperty) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableShortAccountTypeProperty) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

