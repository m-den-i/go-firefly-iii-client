/*
Firefly III API v2.0.4

This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2023-06-11T09:14:35+00:00 

API version: 2.0.4
Contact: james@firefly-iii.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// RecurrenceTransactionType the model 'RecurrenceTransactionType'
type RecurrenceTransactionType string

// List of RecurrenceTransactionType
const (
	WITHDRAWAL RecurrenceTransactionType = "withdrawal"
	TRANSFER RecurrenceTransactionType = "transfer"
	DEPOSIT RecurrenceTransactionType = "deposit"
)

// All allowed values of RecurrenceTransactionType enum
var AllowedRecurrenceTransactionTypeEnumValues = []RecurrenceTransactionType{
	"withdrawal",
	"transfer",
	"deposit",
}

func (v *RecurrenceTransactionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RecurrenceTransactionType(value)
	for _, existing := range AllowedRecurrenceTransactionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RecurrenceTransactionType", value)
}

// NewRecurrenceTransactionTypeFromValue returns a pointer to a valid RecurrenceTransactionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRecurrenceTransactionTypeFromValue(v string) (*RecurrenceTransactionType, error) {
	ev := RecurrenceTransactionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RecurrenceTransactionType: valid values are %v", v, AllowedRecurrenceTransactionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RecurrenceTransactionType) IsValid() bool {
	for _, existing := range AllowedRecurrenceTransactionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RecurrenceTransactionType value
func (v RecurrenceTransactionType) Ptr() *RecurrenceTransactionType {
	return &v
}

type NullableRecurrenceTransactionType struct {
	value *RecurrenceTransactionType
	isSet bool
}

func (v NullableRecurrenceTransactionType) Get() *RecurrenceTransactionType {
	return v.value
}

func (v *NullableRecurrenceTransactionType) Set(val *RecurrenceTransactionType) {
	v.value = val
	v.isSet = true
}

func (v NullableRecurrenceTransactionType) IsSet() bool {
	return v.isSet
}

func (v *NullableRecurrenceTransactionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecurrenceTransactionType(val *RecurrenceTransactionType) *NullableRecurrenceTransactionType {
	return &NullableRecurrenceTransactionType{value: val, isSet: true}
}

func (v NullableRecurrenceTransactionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecurrenceTransactionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

