/*
Firefly III API v2.0.4

This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2023-06-11T09:14:35+00:00 

API version: 2.0.4
Contact: james@firefly-iii.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CurrencyRead type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CurrencyRead{}

// CurrencyRead struct for CurrencyRead
type CurrencyRead struct {
	// Immutable value
	Type string `json:"type"`
	Id string `json:"id"`
	Attributes Currency `json:"attributes"`
}

// NewCurrencyRead instantiates a new CurrencyRead object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCurrencyRead(type_ string, id string, attributes Currency) *CurrencyRead {
	this := CurrencyRead{}
	this.Type = type_
	this.Id = id
	this.Attributes = attributes
	return &this
}

// NewCurrencyReadWithDefaults instantiates a new CurrencyRead object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCurrencyReadWithDefaults() *CurrencyRead {
	this := CurrencyRead{}
	return &this
}

// GetType returns the Type field value
func (o *CurrencyRead) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CurrencyRead) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *CurrencyRead) SetType(v string) {
	o.Type = v
}

// GetId returns the Id field value
func (o *CurrencyRead) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CurrencyRead) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CurrencyRead) SetId(v string) {
	o.Id = v
}

// GetAttributes returns the Attributes field value
func (o *CurrencyRead) GetAttributes() Currency {
	if o == nil {
		var ret Currency
		return ret
	}

	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value
// and a boolean to check if the value has been set.
func (o *CurrencyRead) GetAttributesOk() (*Currency, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Attributes, true
}

// SetAttributes sets field value
func (o *CurrencyRead) SetAttributes(v Currency) {
	o.Attributes = v
}

func (o CurrencyRead) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CurrencyRead) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["id"] = o.Id
	toSerialize["attributes"] = o.Attributes
	return toSerialize, nil
}

type NullableCurrencyRead struct {
	value *CurrencyRead
	isSet bool
}

func (v NullableCurrencyRead) Get() *CurrencyRead {
	return v.value
}

func (v *NullableCurrencyRead) Set(val *CurrencyRead) {
	v.value = val
	v.isSet = true
}

func (v NullableCurrencyRead) IsSet() bool {
	return v.isSet
}

func (v *NullableCurrencyRead) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCurrencyRead(val *CurrencyRead) *NullableCurrencyRead {
	return &NullableCurrencyRead{value: val, isSet: true}
}

func (v NullableCurrencyRead) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCurrencyRead) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


